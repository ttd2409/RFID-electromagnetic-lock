
SmartDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800603c  0800603c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800603c  0800603c  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800603c  0800603c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200000c4  08006108  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006108  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f914  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da2  00000000  00000000  0002fa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198d3  00000000  00000000  00034238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a1b  00000000  00000000  0004db0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bdf  00000000  00000000  00061526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000e9158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c7c 	.word	0x08005c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08005c7c 	.word	0x08005c7c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0310 	add.w	r3, r7, #16
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000184:	4b35      	ldr	r3, [pc, #212]	; (800025c <MX_GPIO_Init+0xec>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a34      	ldr	r2, [pc, #208]	; (800025c <MX_GPIO_Init+0xec>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
 8000190:	4b32      	ldr	r3, [pc, #200]	; (800025c <MX_GPIO_Init+0xec>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019c:	4b2f      	ldr	r3, [pc, #188]	; (800025c <MX_GPIO_Init+0xec>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a2e      	ldr	r2, [pc, #184]	; (800025c <MX_GPIO_Init+0xec>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b2c      	ldr	r3, [pc, #176]	; (800025c <MX_GPIO_Init+0xec>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0320 	and.w	r3, r3, #32
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <MX_GPIO_Init+0xec>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a28      	ldr	r2, [pc, #160]	; (800025c <MX_GPIO_Init+0xec>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b26      	ldr	r3, [pc, #152]	; (800025c <MX_GPIO_Init+0xec>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001cc:	4b23      	ldr	r3, [pc, #140]	; (800025c <MX_GPIO_Init+0xec>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a22      	ldr	r2, [pc, #136]	; (800025c <MX_GPIO_Init+0xec>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b20      	ldr	r3, [pc, #128]	; (800025c <MX_GPIO_Init+0xec>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|DP1_Pin|DP2_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80001ea:	481d      	ldr	r0, [pc, #116]	; (8000260 <MX_GPIO_Init+0xf0>)
 80001ec:	f002 fe0d 	bl	8002e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_CS_Pin|C4_Pin|C3_Pin|C1_Pin
 80001f0:	2200      	movs	r2, #0
 80001f2:	f24b 0121 	movw	r1, #45089	; 0xb021
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <MX_GPIO_Init+0xf4>)
 80001f8:	f002 fe07 	bl	8002e0a <HAL_GPIO_WritePin>
                          |C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_STT_Pin|DP1_Pin|DP2_Pin;
 80001fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000202:	2301      	movs	r3, #1
 8000204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000206:	2300      	movs	r3, #0
 8000208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020a:	2302      	movs	r3, #2
 800020c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	4619      	mov	r1, r3
 8000214:	4812      	ldr	r0, [pc, #72]	; (8000260 <MX_GPIO_Init+0xf0>)
 8000216:	f002 fc5d 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|C4_Pin|C3_Pin|C1_Pin
 800021a:	f24b 0321 	movw	r3, #45089	; 0xb021
 800021e:	613b      	str	r3, [r7, #16]
                          |C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000220:	2301      	movs	r3, #1
 8000222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000228:	2302      	movs	r3, #2
 800022a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	480c      	ldr	r0, [pc, #48]	; (8000264 <MX_GPIO_Init+0xf4>)
 8000234:	f002 fc4e 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000238:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	4619      	mov	r1, r3
 800024c:	4806      	ldr	r0, [pc, #24]	; (8000268 <MX_GPIO_Init+0xf8>)
 800024e:	f002 fc41 	bl	8002ad4 <HAL_GPIO_Init>

}
 8000252:	bf00      	nop
 8000254:	3720      	adds	r7, #32
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	40011000 	.word	0x40011000
 8000264:	40010c00 	.word	0x40010c00
 8000268:	40010800 	.word	0x40010800

0800026c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_I2C1_Init+0x50>)
 8000272:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <MX_I2C1_Init+0x54>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_I2C1_Init+0x50>)
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <MX_I2C1_Init+0x58>)
 800027a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <MX_I2C1_Init+0x50>)
 800028a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800028e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <MX_I2C1_Init+0x50>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MX_I2C1_Init+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <MX_I2C1_Init+0x50>)
 80002aa:	f002 fddf 	bl	8002e6c <HAL_I2C_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 fcd1 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200000e0 	.word	0x200000e0
 80002c0:	40005400 	.word	0x40005400
 80002c4:	000186a0 	.word	0x000186a0

080002c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a15      	ldr	r2, [pc, #84]	; (8000338 <HAL_I2C_MspInit+0x70>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d123      	bne.n	8000330 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <HAL_I2C_MspInit+0x74>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a13      	ldr	r2, [pc, #76]	; (800033c <HAL_I2C_MspInit+0x74>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <HAL_I2C_MspInit+0x74>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000300:	23c0      	movs	r3, #192	; 0xc0
 8000302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000304:	2312      	movs	r3, #18
 8000306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000308:	2303      	movs	r3, #3
 800030a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	4619      	mov	r1, r3
 8000312:	480b      	ldr	r0, [pc, #44]	; (8000340 <HAL_I2C_MspInit+0x78>)
 8000314:	f002 fbde 	bl	8002ad4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HAL_I2C_MspInit+0x74>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <HAL_I2C_MspInit+0x74>)
 800031e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000322:	61d3      	str	r3, [r2, #28]
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_I2C_MspInit+0x74>)
 8000326:	69db      	ldr	r3, [r3, #28]
 8000328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3720      	adds	r7, #32
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40005400 	.word	0x40005400
 800033c:	40021000 	.word	0x40021000
 8000340:	40010c00 	.word	0x40010c00

08000344 <read_address_key>:
#include "keypad.h"

unsigned char read_address_key()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  unsigned char value=0;
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]
  out1(C1_GPIO_Port, C1_Pin);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000354:	48bc      	ldr	r0, [pc, #752]	; (8000648 <read_address_key+0x304>)
 8000356:	f002 fd58 	bl	8002e0a <HAL_GPIO_WritePin>
  out1(C2_GPIO_Port, C2_Pin);
 800035a:	2201      	movs	r2, #1
 800035c:	2120      	movs	r1, #32
 800035e:	48ba      	ldr	r0, [pc, #744]	; (8000648 <read_address_key+0x304>)
 8000360:	f002 fd53 	bl	8002e0a <HAL_GPIO_WritePin>
  out1(C3_GPIO_Port, C3_Pin);
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	48b7      	ldr	r0, [pc, #732]	; (8000648 <read_address_key+0x304>)
 800036c:	f002 fd4d 	bl	8002e0a <HAL_GPIO_WritePin>
  out1(C4_GPIO_Port, C4_Pin);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000376:	48b4      	ldr	r0, [pc, #720]	; (8000648 <read_address_key+0x304>)
 8000378:	f002 fd47 	bl	8002e0a <HAL_GPIO_WritePin>


  delay_ms(delay_read);
 800037c:	2005      	movs	r0, #5
 800037e:	f002 f9c5 	bl	800270c <HAL_Delay>
  //cot 1
  out0(C1_GPIO_Port, C1_Pin); delay_ms(5);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000388:	48af      	ldr	r0, [pc, #700]	; (8000648 <read_address_key+0x304>)
 800038a:	f002 fd3e 	bl	8002e0a <HAL_GPIO_WritePin>
 800038e:	2005      	movs	r0, #5
 8000390:	f002 f9bc 	bl	800270c <HAL_Delay>
  if(!r1) {while(!r1);  return value=1;} //hang 1
 8000394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000398:	48ac      	ldr	r0, [pc, #688]	; (800064c <read_address_key+0x308>)
 800039a:	f002 fd1f 	bl	8002ddc <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d10c      	bne.n	80003be <read_address_key+0x7a>
 80003a4:	bf00      	nop
 80003a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003aa:	48a8      	ldr	r0, [pc, #672]	; (800064c <read_address_key+0x308>)
 80003ac:	f002 fd16 	bl	8002ddc <HAL_GPIO_ReadPin>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f7      	beq.n	80003a6 <read_address_key+0x62>
 80003b6:	2301      	movs	r3, #1
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	e17c      	b.n	80006b8 <read_address_key+0x374>
  if(!r2) {while(!r2);  return value=5;} //hang 2
 80003be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c2:	48a2      	ldr	r0, [pc, #648]	; (800064c <read_address_key+0x308>)
 80003c4:	f002 fd0a 	bl	8002ddc <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d10c      	bne.n	80003e8 <read_address_key+0xa4>
 80003ce:	bf00      	nop
 80003d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d4:	489d      	ldr	r0, [pc, #628]	; (800064c <read_address_key+0x308>)
 80003d6:	f002 fd01 	bl	8002ddc <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f7      	beq.n	80003d0 <read_address_key+0x8c>
 80003e0:	2305      	movs	r3, #5
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	e167      	b.n	80006b8 <read_address_key+0x374>
  if(!r3) {while(!r3);  return value=9;} //hang 3
 80003e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ec:	4897      	ldr	r0, [pc, #604]	; (800064c <read_address_key+0x308>)
 80003ee:	f002 fcf5 	bl	8002ddc <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d10c      	bne.n	8000412 <read_address_key+0xce>
 80003f8:	bf00      	nop
 80003fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fe:	4893      	ldr	r0, [pc, #588]	; (800064c <read_address_key+0x308>)
 8000400:	f002 fcec 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f7      	beq.n	80003fa <read_address_key+0xb6>
 800040a:	2309      	movs	r3, #9
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	e152      	b.n	80006b8 <read_address_key+0x374>
  if(!r4) {while(!r4);  return value=13;} //hang 4
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	488d      	ldr	r0, [pc, #564]	; (800064c <read_address_key+0x308>)
 8000418:	f002 fce0 	bl	8002ddc <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d10c      	bne.n	800043c <read_address_key+0xf8>
 8000422:	bf00      	nop
 8000424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000428:	4888      	ldr	r0, [pc, #544]	; (800064c <read_address_key+0x308>)
 800042a:	f002 fcd7 	bl	8002ddc <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f7      	beq.n	8000424 <read_address_key+0xe0>
 8000434:	230d      	movs	r3, #13
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	e13d      	b.n	80006b8 <read_address_key+0x374>
  out1(C1_GPIO_Port, C1_Pin);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000442:	4881      	ldr	r0, [pc, #516]	; (8000648 <read_address_key+0x304>)
 8000444:	f002 fce1 	bl	8002e0a <HAL_GPIO_WritePin>

  delay_ms(delay_read);
 8000448:	2005      	movs	r0, #5
 800044a:	f002 f95f 	bl	800270c <HAL_Delay>

  //cot 2
  out0(C2_GPIO_Port, C2_Pin); HAL_Delay(5);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	487d      	ldr	r0, [pc, #500]	; (8000648 <read_address_key+0x304>)
 8000454:	f002 fcd9 	bl	8002e0a <HAL_GPIO_WritePin>
 8000458:	2005      	movs	r0, #5
 800045a:	f002 f957 	bl	800270c <HAL_Delay>
  if(!r1) {while(!r1);  return value=2;} //hang 1
 800045e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000462:	487a      	ldr	r0, [pc, #488]	; (800064c <read_address_key+0x308>)
 8000464:	f002 fcba 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d10c      	bne.n	8000488 <read_address_key+0x144>
 800046e:	bf00      	nop
 8000470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000474:	4875      	ldr	r0, [pc, #468]	; (800064c <read_address_key+0x308>)
 8000476:	f002 fcb1 	bl	8002ddc <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f7      	beq.n	8000470 <read_address_key+0x12c>
 8000480:	2302      	movs	r3, #2
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	e117      	b.n	80006b8 <read_address_key+0x374>
  if(!r2) {while(!r2);  return value=6;} //hang 2
 8000488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048c:	486f      	ldr	r0, [pc, #444]	; (800064c <read_address_key+0x308>)
 800048e:	f002 fca5 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d10c      	bne.n	80004b2 <read_address_key+0x16e>
 8000498:	bf00      	nop
 800049a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800049e:	486b      	ldr	r0, [pc, #428]	; (800064c <read_address_key+0x308>)
 80004a0:	f002 fc9c 	bl	8002ddc <HAL_GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f7      	beq.n	800049a <read_address_key+0x156>
 80004aa:	2306      	movs	r3, #6
 80004ac:	71fb      	strb	r3, [r7, #7]
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	e102      	b.n	80006b8 <read_address_key+0x374>
  if(!r3) {while(!r3);  return value=10;} //hang 3
 80004b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b6:	4865      	ldr	r0, [pc, #404]	; (800064c <read_address_key+0x308>)
 80004b8:	f002 fc90 	bl	8002ddc <HAL_GPIO_ReadPin>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d10c      	bne.n	80004dc <read_address_key+0x198>
 80004c2:	bf00      	nop
 80004c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c8:	4860      	ldr	r0, [pc, #384]	; (800064c <read_address_key+0x308>)
 80004ca:	f002 fc87 	bl	8002ddc <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0f7      	beq.n	80004c4 <read_address_key+0x180>
 80004d4:	230a      	movs	r3, #10
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	e0ed      	b.n	80006b8 <read_address_key+0x374>
  if(!r4) {while(!r4);  return value=14;} //hang 4
 80004dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e0:	485a      	ldr	r0, [pc, #360]	; (800064c <read_address_key+0x308>)
 80004e2:	f002 fc7b 	bl	8002ddc <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10c      	bne.n	8000506 <read_address_key+0x1c2>
 80004ec:	bf00      	nop
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	4856      	ldr	r0, [pc, #344]	; (800064c <read_address_key+0x308>)
 80004f4:	f002 fc72 	bl	8002ddc <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f7      	beq.n	80004ee <read_address_key+0x1aa>
 80004fe:	230e      	movs	r3, #14
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	e0d8      	b.n	80006b8 <read_address_key+0x374>
  out1(C2_GPIO_Port, C2_Pin);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	484f      	ldr	r0, [pc, #316]	; (8000648 <read_address_key+0x304>)
 800050c:	f002 fc7d 	bl	8002e0a <HAL_GPIO_WritePin>


  delay_ms(delay_read);
 8000510:	2005      	movs	r0, #5
 8000512:	f002 f8fb 	bl	800270c <HAL_Delay>
  //cot 3
  out0(C3_GPIO_Port, C3_Pin); delay_ms(5);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	484a      	ldr	r0, [pc, #296]	; (8000648 <read_address_key+0x304>)
 800051e:	f002 fc74 	bl	8002e0a <HAL_GPIO_WritePin>
 8000522:	2005      	movs	r0, #5
 8000524:	f002 f8f2 	bl	800270c <HAL_Delay>
  if(!r1) {while(!r1);  return value=3;} //hang 1
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	4847      	ldr	r0, [pc, #284]	; (800064c <read_address_key+0x308>)
 800052e:	f002 fc55 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10c      	bne.n	8000552 <read_address_key+0x20e>
 8000538:	bf00      	nop
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4843      	ldr	r0, [pc, #268]	; (800064c <read_address_key+0x308>)
 8000540:	f002 fc4c 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f7      	beq.n	800053a <read_address_key+0x1f6>
 800054a:	2303      	movs	r3, #3
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	e0b2      	b.n	80006b8 <read_address_key+0x374>
  if(!r2) {while(!r2);  return value=7;} //hang 2
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	483d      	ldr	r0, [pc, #244]	; (800064c <read_address_key+0x308>)
 8000558:	f002 fc40 	bl	8002ddc <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d10c      	bne.n	800057c <read_address_key+0x238>
 8000562:	bf00      	nop
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	4838      	ldr	r0, [pc, #224]	; (800064c <read_address_key+0x308>)
 800056a:	f002 fc37 	bl	8002ddc <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f7      	beq.n	8000564 <read_address_key+0x220>
 8000574:	2307      	movs	r3, #7
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	e09d      	b.n	80006b8 <read_address_key+0x374>
  if(!r3) {while(!r3);  return value=11;} //hang 3
 800057c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000580:	4832      	ldr	r0, [pc, #200]	; (800064c <read_address_key+0x308>)
 8000582:	f002 fc2b 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10c      	bne.n	80005a6 <read_address_key+0x262>
 800058c:	bf00      	nop
 800058e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000592:	482e      	ldr	r0, [pc, #184]	; (800064c <read_address_key+0x308>)
 8000594:	f002 fc22 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f7      	beq.n	800058e <read_address_key+0x24a>
 800059e:	230b      	movs	r3, #11
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	e088      	b.n	80006b8 <read_address_key+0x374>
  if(!r4) {while(!r4);  return value=15;} //hang 4
 80005a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005aa:	4828      	ldr	r0, [pc, #160]	; (800064c <read_address_key+0x308>)
 80005ac:	f002 fc16 	bl	8002ddc <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d10c      	bne.n	80005d0 <read_address_key+0x28c>
 80005b6:	bf00      	nop
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	4823      	ldr	r0, [pc, #140]	; (800064c <read_address_key+0x308>)
 80005be:	f002 fc0d 	bl	8002ddc <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f7      	beq.n	80005b8 <read_address_key+0x274>
 80005c8:	230f      	movs	r3, #15
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	e073      	b.n	80006b8 <read_address_key+0x374>
  out1(C3_GPIO_Port, C3_Pin);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	481c      	ldr	r0, [pc, #112]	; (8000648 <read_address_key+0x304>)
 80005d8:	f002 fc17 	bl	8002e0a <HAL_GPIO_WritePin>


  delay_ms(delay_read);
 80005dc:	2005      	movs	r0, #5
 80005de:	f002 f895 	bl	800270c <HAL_Delay>
  //cot 4
  out0(C4_GPIO_Port, C4_Pin); delay_ms(5);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4817      	ldr	r0, [pc, #92]	; (8000648 <read_address_key+0x304>)
 80005ea:	f002 fc0e 	bl	8002e0a <HAL_GPIO_WritePin>
 80005ee:	2005      	movs	r0, #5
 80005f0:	f002 f88c 	bl	800270c <HAL_Delay>
  if(!r1) {while(!r1);  return value=4;} //hang 1
 80005f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f8:	4814      	ldr	r0, [pc, #80]	; (800064c <read_address_key+0x308>)
 80005fa:	f002 fbef 	bl	8002ddc <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d10c      	bne.n	800061e <read_address_key+0x2da>
 8000604:	bf00      	nop
 8000606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <read_address_key+0x308>)
 800060c:	f002 fbe6 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f7      	beq.n	8000606 <read_address_key+0x2c2>
 8000616:	2304      	movs	r3, #4
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	e04c      	b.n	80006b8 <read_address_key+0x374>
  if(!r2) {while(!r2);  return value=8;} //hang 2
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <read_address_key+0x308>)
 8000624:	f002 fbda 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d110      	bne.n	8000650 <read_address_key+0x30c>
 800062e:	bf00      	nop
 8000630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <read_address_key+0x308>)
 8000636:	f002 fbd1 	bl	8002ddc <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f7      	beq.n	8000630 <read_address_key+0x2ec>
 8000640:	2308      	movs	r3, #8
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	e037      	b.n	80006b8 <read_address_key+0x374>
 8000648:	40010c00 	.word	0x40010c00
 800064c:	40010800 	.word	0x40010800
  if(!r3) {while(!r3);  return value=12;} //hang 3
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <read_address_key+0x37c>)
 8000656:	f002 fbc1 	bl	8002ddc <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10c      	bne.n	800067a <read_address_key+0x336>
 8000660:	bf00      	nop
 8000662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <read_address_key+0x37c>)
 8000668:	f002 fbb8 	bl	8002ddc <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f7      	beq.n	8000662 <read_address_key+0x31e>
 8000672:	230c      	movs	r3, #12
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	e01e      	b.n	80006b8 <read_address_key+0x374>
  if(!r4) {while(!r4);  return value=16;} //hang 4
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <read_address_key+0x37c>)
 8000680:	f002 fbac 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <read_address_key+0x360>
 800068a:	bf00      	nop
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <read_address_key+0x37c>)
 8000692:	f002 fba3 	bl	8002ddc <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f7      	beq.n	800068c <read_address_key+0x348>
 800069c:	2310      	movs	r3, #16
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	e009      	b.n	80006b8 <read_address_key+0x374>
  out1(C4_GPIO_Port, C4_Pin);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <read_address_key+0x380>)
 80006ac:	f002 fbad 	bl	8002e0a <HAL_GPIO_WritePin>

  delay_ms(delay_read);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f002 f82b 	bl	800270c <HAL_Delay>
  return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <read_key>:

/*
*  ham ma hoa toa do phim ra ki tu va gui qua uart
*/
char read_key()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  char phim=0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
  char dat=read_address_key();
 80006d2:	f7ff fe37 	bl	8000344 <read_address_key>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71bb      	strb	r3, [r7, #6]
  switch(dat)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d852      	bhi.n	8000788 <read_key+0xc0>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <read_key+0x20>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000729 	.word	0x08000729
 80006ec:	0800072f 	.word	0x0800072f
 80006f0:	08000735 	.word	0x08000735
 80006f4:	0800073b 	.word	0x0800073b
 80006f8:	08000741 	.word	0x08000741
 80006fc:	08000747 	.word	0x08000747
 8000700:	0800074d 	.word	0x0800074d
 8000704:	08000753 	.word	0x08000753
 8000708:	08000759 	.word	0x08000759
 800070c:	0800075f 	.word	0x0800075f
 8000710:	08000765 	.word	0x08000765
 8000714:	0800076b 	.word	0x0800076b
 8000718:	08000771 	.word	0x08000771
 800071c:	08000777 	.word	0x08000777
 8000720:	0800077d 	.word	0x0800077d
 8000724:	08000783 	.word	0x08000783
  {
     case 1: phim='1';  break;
 8000728:	2331      	movs	r3, #49	; 0x31
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	e02d      	b.n	800078a <read_key+0xc2>
     case 2: phim='2';  break;
 800072e:	2332      	movs	r3, #50	; 0x32
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e02a      	b.n	800078a <read_key+0xc2>
     case 3: phim='3';  break;
 8000734:	2333      	movs	r3, #51	; 0x33
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e027      	b.n	800078a <read_key+0xc2>
     case 4: phim='A';  break;
 800073a:	2341      	movs	r3, #65	; 0x41
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e024      	b.n	800078a <read_key+0xc2>

     case 5: phim='4';  break;
 8000740:	2334      	movs	r3, #52	; 0x34
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	e021      	b.n	800078a <read_key+0xc2>
     case 6: phim='5';  break;
 8000746:	2335      	movs	r3, #53	; 0x35
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e01e      	b.n	800078a <read_key+0xc2>
     case 7: phim='6';  break;
 800074c:	2336      	movs	r3, #54	; 0x36
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	e01b      	b.n	800078a <read_key+0xc2>
     case 8: phim='B';  break;
 8000752:	2342      	movs	r3, #66	; 0x42
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e018      	b.n	800078a <read_key+0xc2>

     case 9:  phim='7';  break;
 8000758:	2337      	movs	r3, #55	; 0x37
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	e015      	b.n	800078a <read_key+0xc2>
     case 10: phim='8';  break;
 800075e:	2338      	movs	r3, #56	; 0x38
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	e012      	b.n	800078a <read_key+0xc2>
     case 11: phim='9';  break;
 8000764:	2339      	movs	r3, #57	; 0x39
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	e00f      	b.n	800078a <read_key+0xc2>
     case 12: phim='C';  break;
 800076a:	2343      	movs	r3, #67	; 0x43
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e00c      	b.n	800078a <read_key+0xc2>

     case 13: phim='*';  break;
 8000770:	232a      	movs	r3, #42	; 0x2a
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	e009      	b.n	800078a <read_key+0xc2>
     case 14: phim='0';  break;
 8000776:	2330      	movs	r3, #48	; 0x30
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e006      	b.n	800078a <read_key+0xc2>
     case 15: phim='#';  break;
 800077c:	2323      	movs	r3, #35	; 0x23
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	e003      	b.n	800078a <read_key+0xc2>
     case 16: phim='D';  break;
 8000782:	2344      	movs	r3, #68	; 0x44
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e000      	b.n	800078a <read_key+0xc2>

     default: break;
 8000788:	bf00      	nop
  }
  return phim;
 800078a:	79fb      	ldrb	r3, [r7, #7]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <lcd_send_cmd>:
//extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f023 030f 	bic.w	r3, r3, #15
 80007a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f043 030c 	orr.w	r3, r3, #12
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	f043 030c 	orr.w	r3, r3, #12
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007d4:	f107 0208 	add.w	r2, r7, #8
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2304      	movs	r3, #4
 80007de:	214e      	movs	r1, #78	; 0x4e
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <lcd_send_cmd+0x60>)
 80007e2:	f002 fc87 	bl	80030f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f001 ff90 	bl	800270c <HAL_Delay>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000e0 	.word	0x200000e0

080007f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f023 030f 	bic.w	r3, r3, #15
 8000808:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f043 030d 	orr.w	r3, r3, #13
 8000816:	b2db      	uxtb	r3, r3
 8000818:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f043 0309 	orr.w	r3, r3, #9
 8000820:	b2db      	uxtb	r3, r3
 8000822:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	f043 030d 	orr.w	r3, r3, #13
 800082a:	b2db      	uxtb	r3, r3
 800082c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f043 0309 	orr.w	r3, r3, #9
 8000834:	b2db      	uxtb	r3, r3
 8000836:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000838:	f107 0208 	add.w	r2, r7, #8
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2304      	movs	r3, #4
 8000842:	214e      	movs	r1, #78	; 0x4e
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <lcd_send_data+0x5c>)
 8000846:	f002 fc55 	bl	80030f4 <HAL_I2C_Master_Transmit>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000e0 	.word	0x200000e0

08000858 <lcd_init>:

void lcd_init (void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800085c:	2033      	movs	r0, #51	; 0x33
 800085e:	f7ff ff99 	bl	8000794 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f7ff ff96 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(50);
 8000868:	2032      	movs	r0, #50	; 0x32
 800086a:	f001 ff4f 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800086e:	2028      	movs	r0, #40	; 0x28
 8000870:	f7ff ff90 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(50);
 8000874:	2032      	movs	r0, #50	; 0x32
 8000876:	f001 ff49 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff8a 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(70);
 8000880:	2046      	movs	r0, #70	; 0x46
 8000882:	f001 ff43 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff84 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(50);
 800088c:	2032      	movs	r0, #50	; 0x32
 800088e:	f001 ff3d 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000892:	200c      	movs	r0, #12
 8000894:	f7ff ff7e 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(50);
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f001 ff37 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff78 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(50);
 80008a4:	2032      	movs	r0, #50	; 0x32
 80008a6:	f001 ff31 	bl	800270c <HAL_Delay>
	lcd_send_cmd (0x80);
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	f7ff ff72 	bl	8000794 <lcd_send_cmd>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008bc:	e006      	b.n	80008cc <lcd_send_string+0x18>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff96 	bl	80007f8 <lcd_send_data>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f4      	bne.n	80008be <lcd_send_string+0xa>
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <lcd_clear>:

void lcd_clear(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ff56 	bl	8000794 <lcd_send_cmd>
	HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f001 ff0f 	bl	800270c <HAL_Delay>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d108      	bne.n	8000914 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	337f      	adds	r3, #127	; 0x7f
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e022      	b.n	800095a <lcd_goto_XY+0x68>
	}
	else if(row==2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d109      	bne.n	800092e <lcd_goto_XY+0x3c>
	{
		pos_Addr = 0x80 | (0x40 + col);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3340      	adds	r3, #64	; 0x40
 8000920:	b2db      	uxtb	r3, r3
 8000922:	b25b      	sxtb	r3, r3
 8000924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000928:	b25b      	sxtb	r3, r3
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e015      	b.n	800095a <lcd_goto_XY+0x68>
	}
	else if(row==3)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d109      	bne.n	8000948 <lcd_goto_XY+0x56>
	{
		pos_Addr = 0x80 | (0x14 + col);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	3314      	adds	r3, #20
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b25b      	sxtb	r3, r3
 800093e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000942:	b25b      	sxtb	r3, r3
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e008      	b.n	800095a <lcd_goto_XY+0x68>
	}
	else
	{
		pos_Addr = 0x80 | (0x54 + col);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3354      	adds	r3, #84	; 0x54
 800094e:	b2db      	uxtb	r3, r3
 8000950:	b25b      	sxtb	r3, r3
 8000952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000956:	b25b      	sxtb	r3, r3
 8000958:	73fb      	strb	r3, [r7, #15]
	}

	lcd_send_cmd(pos_Addr);
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff19 	bl	8000794 <lcd_send_cmd>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <lcd_string>:


void lcd_string(char hang,char cot,char *str)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	603a      	str	r2, [r7, #0]
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	460b      	mov	r3, r1
 8000978:	71bb      	strb	r3, [r7, #6]
	lcd_xy(hang,cot-1);
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	3b01      	subs	r3, #1
 8000980:	4619      	mov	r1, r3
 8000982:	4610      	mov	r0, r2
 8000984:	f7ff ffb5 	bl	80008f2 <lcd_goto_XY>
	lcd_send_string(str);
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff ff93 	bl	80008b4 <lcd_send_string>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <lcd_char>:
void lcd_char(char hang, char cot,char dat)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	460b      	mov	r3, r1
 80009a2:	71bb      	strb	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	717b      	strb	r3, [r7, #5]
	lcd_xy(hang,cot);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff9f 	bl	80008f2 <lcd_goto_XY>
	lcd_send_data(dat);
 80009b4:	797b      	ldrb	r3, [r7, #5]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff1e 	bl	80007f8 <lcd_send_data>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_UART_RxCpltCallback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    // uart interrupt
    if(huart->Instance==huart2.Instance)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b36      	ldr	r3, [pc, #216]	; (8000aac <HAL_UART_RxCpltCallback+0xe8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d12c      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0x6e>
    {
		  if(sim.charRec==SIM_STOP)
 80009d8:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b3c      	cmp	r3, #60	; 0x3c
 80009de:	d105      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x28>
		  {
			  sim.dataDoneFrame=true;
 80009e0:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	705a      	strb	r2, [r3, #1]
			  sim.enReaddata=false;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	709a      	strb	r2, [r3, #2]
		  }

		  if(sim.enReaddata)
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d010      	beq.n	8000a16 <HAL_UART_RxCpltCallback+0x52>
		  {
			  sim.arrRec[sim.countRec]=sim.charRec;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80009fa:	4619      	mov	r1, r3
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a02:	440b      	add	r3, r1
 8000a04:	70da      	strb	r2, [r3, #3]
			  sim.countRec++;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		  }

		  if(sim.charRec==SIM_START)
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8000a1c:	d109      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0x6e>
		  {
			  sim.enReaddata=true;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	709a      	strb	r2, [r3, #2]
			  sim.dataDoneFrame=false;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	705a      	strb	r2, [r3, #1]
			  sim.countRec=0;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		  }

    }//uart interrupt

    // uart interrupt
    if(huart->Instance==huart1.Instance)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_UART_RxCpltCallback+0xf0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d128      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0xcc>
    {

    	if(VanTay.charRec=='#') VanTay.dataDoneFrame=true;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b23      	cmp	r3, #35	; 0x23
 8000a44:	d102      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x88>
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	731a      	strb	r2, [r3, #12]

    	 if(VanTay.enReadData && VanTay.dataDoneFrame==false)
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d011      	beq.n	8000a78 <HAL_UART_RxCpltCallback+0xb4>
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10d      	bne.n	8000a78 <HAL_UART_RxCpltCallback+0xb4>
    	 {
    		 VanTay.arrRec[VanTay.countChar]=VanTay.charRec;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a5e:	7b5b      	ldrb	r3, [r3, #13]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a68:	440b      	add	r3, r1
 8000a6a:	709a      	strb	r2, [r3, #2]
    		 VanTay.countChar++;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a6e:	7b5b      	ldrb	r3, [r3, #13]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a76:	735a      	strb	r2, [r3, #13]
    	 }

		 if(VanTay.charRec=='*') VanTay.enReadData=true;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000a7e:	d102      	bne.n	8000a86 <HAL_UART_RxCpltCallback+0xc2>
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	705a      	strb	r2, [r3, #1]

		 HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8000a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_UART_RxCpltCallback+0xf8>)
 8000a8c:	f002 f9d5 	bl	8002e3a <HAL_GPIO_TogglePin>
    }//uart interrupt



    HAL_UART_Receive_IT(&huart1,&VanTay.charRec,1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <HAL_UART_RxCpltCallback+0xf0>)
 8000a96:	f003 fe42 	bl	800471e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2,&sim.charRec,1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <HAL_UART_RxCpltCallback+0xec>)
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <HAL_UART_RxCpltCallback+0xe8>)
 8000aa0:	f003 fe3d 	bl	800471e <HAL_UART_Receive_IT>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200003c8 	.word	0x200003c8
 8000ab0:	20000134 	.word	0x20000134
 8000ab4:	20000380 	.word	0x20000380
 8000ab8:	200002b4 	.word	0x200002b4
 8000abc:	40011000 	.word	0x40011000

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f001 fdbf 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f881 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f7ff fb4f 	bl	8000170 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad2:	f7ff fbcb 	bl	800026c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ad6:	f001 fb7f 	bl	80021d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ada:	f001 fca7 	bl	800242c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ade:	f001 fccf 	bl	8002480 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000ae2:	f000 fab2 	bl	800104a <MFRC522_Init>

  lcd_init();
 8000ae6:	f7ff feb7 	bl	8000858 <lcd_init>
  HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f001 fe0e 	bl	800270c <HAL_Delay>
  lcd_clear();
 8000af0:	f7ff fef5 	bl	80008de <lcd_clear>
  HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f001 fe08 	bl	800270c <HAL_Delay>
  lcd_string(1, 1, "Loading...");
 8000afc:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <main+0xe0>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff32 	bl	800096a <lcd_string>
  HAL_Delay(2000);
 8000b06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0a:	f001 fdff 	bl	800270c <HAL_Delay>

  //sim_print("run application\n\r");
  sim_print("AT"); HAL_Delay(1000);
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <main+0xe4>)
 8000b10:	f000 fadc 	bl	80010cc <sim_print>
 8000b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b18:	f001 fdf8 	bl	800270c <HAL_Delay>
  sim_print("ATE0"); HAL_Delay(1000);
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <main+0xe8>)
 8000b1e:	f000 fad5 	bl	80010cc <sim_print>
 8000b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b26:	f001 fdf1 	bl	800270c <HAL_Delay>
  sim_print("AT&W"); HAL_Delay(1000);
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <main+0xec>)
 8000b2c:	f000 face 	bl	80010cc <sim_print>
 8000b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b34:	f001 fdea 	bl	800270c <HAL_Delay>
  sim_print("AT+CMGF=1"); HAL_Delay(1000);
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <main+0xf0>)
 8000b3a:	f000 fac7 	bl	80010cc <sim_print>
 8000b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b42:	f001 fde3 	bl	800270c <HAL_Delay>
  sim_print("AT+CNMI=2,2"); HAL_Delay(1000);
 8000b46:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <main+0xf4>)
 8000b48:	f000 fac0 	bl	80010cc <sim_print>
 8000b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b50:	f001 fddc 	bl	800270c <HAL_Delay>

  HAL_UART_Receive_IT(&huart2,&sim.charRec,1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4918      	ldr	r1, [pc, #96]	; (8000bb8 <main+0xf8>)
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <main+0xfc>)
 8000b5a:	f003 fde0 	bl	800471e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,&VanTay.charRec,1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4917      	ldr	r1, [pc, #92]	; (8000bc0 <main+0x100>)
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <main+0x104>)
 8000b64:	f003 fddb 	bl	800471e <HAL_UART_Receive_IT>


  HAL_UART_Transmit(&huart1,"run appliation\n",strlen("run appliation\n"),100);
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	4916      	ldr	r1, [pc, #88]	; (8000bc8 <main+0x108>)
 8000b6e:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <main+0x104>)
 8000b70:	f003 fd52 	bl	8004618 <HAL_UART_Transmit>

  for(int i=0;i<10;i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	e00a      	b.n	8000b90 <main+0xd0>
  {
	  HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <main+0x10c>)
 8000b80:	f002 f95b 	bl	8002e3a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f001 fdc1 	bl	800270c <HAL_Delay>
  for(int i=0;i<10;i++)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	ddf1      	ble.n	8000b7a <main+0xba>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  man_hinh_cho();
 8000b96:	f000 fb7b 	bl	8001290 <man_hinh_cho>
	  nhap_phim();
 8000b9a:	f000 fc7d 	bl	8001498 <nhap_phim>
	  man_hinh_cho();
 8000b9e:	e7fa      	b.n	8000b96 <main+0xd6>
 8000ba0:	08005c94 	.word	0x08005c94
 8000ba4:	08005ca0 	.word	0x08005ca0
 8000ba8:	08005ca4 	.word	0x08005ca4
 8000bac:	08005cac 	.word	0x08005cac
 8000bb0:	08005cb4 	.word	0x08005cb4
 8000bb4:	08005cc0 	.word	0x08005cc0
 8000bb8:	20000134 	.word	0x20000134
 8000bbc:	200003c8 	.word	0x200003c8
 8000bc0:	200002b4 	.word	0x200002b4
 8000bc4:	20000380 	.word	0x20000380
 8000bc8:	08005ccc 	.word	0x08005ccc
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	; 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fb7a 	bl	80052d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fdc3 	bl	80037a4 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c24:	f000 f819 	bl	8000c5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 f830 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c4e:	f000 f804 	bl	8000c5a <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5e:	b672      	cpsid	i
}
 8000c60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <Error_Handler+0x8>

08000c64 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000c72:	f107 0208 	add.w	r2, r7, #8
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <SPI1SendByte+0x2c>)
 8000c82:	f003 fa23 	bl	80040cc <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000c86:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000324 	.word	0x20000324

08000c94 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <SPI1_WriteReg+0x3c>)
 8000caa:	f002 f8ae 	bl	8002e0a <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffd7 	bl	8000c64 <SPI1SendByte>
	SPI1SendByte(value);
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ffd3 	bl	8000c64 <SPI1SendByte>
	cs_set();
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <SPI1_WriteReg+0x3c>)
 8000cc4:	f002 f8a1 	bl	8002e0a <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <SPI1_ReadReg+0x3c>)
 8000ce4:	f002 f891 	bl	8002e0a <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ffba 	bl	8000c64 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff ffb7 	bl	8000c64 <SPI1SendByte>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <SPI1_ReadReg+0x3c>)
 8000d00:	f002 f883 	bl	8002e0a <HAL_GPIO_WritePin>
	return val;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d2e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ffac 	bl	8000c94 <SPI1_WriteReg>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffb5 	bl	8000cd4 <SPI1_ReadReg>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ffda 	bl	8000d44 <MFRC522_ReadRegister>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffb8 	bl	8000d14 <MFRC522_WriteRegister>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffc0 	bl	8000d44 <MFRC522_ReadRegister>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff9a 	bl	8000d14 <MFRC522_WriteRegister>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000df4:	2107      	movs	r1, #7
 8000df6:	200d      	movs	r0, #13
 8000df8:	f7ff ff8c 	bl	8000d14 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f000 f80f 	bl	8000e32 <MFRC522_ToCard>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <MFRC522_Request+0x3c>
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	2b10      	cmp	r3, #16
 8000e22:	d001      	beq.n	8000e28 <MFRC522_Request+0x40>
 8000e24:	2302      	movs	r3, #2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000e32:	b590      	push	{r4, r7, lr}
 8000e34:	b087      	sub	sp, #28
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	4613      	mov	r3, r2
 8000e42:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000e44:	2302      	movs	r3, #2
 8000e46:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d006      	beq.n	8000e64 <MFRC522_ToCard+0x32>
 8000e56:	2b0e      	cmp	r3, #14
 8000e58:	d109      	bne.n	8000e6e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	757b      	strb	r3, [r7, #21]
			break;
 8000e62:	e005      	b.n	8000e70 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000e64:	2377      	movs	r3, #119	; 0x77
 8000e66:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000e68:	2330      	movs	r3, #48	; 0x30
 8000e6a:	757b      	strb	r3, [r7, #21]
			break;
 8000e6c:	e000      	b.n	8000e70 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000e6e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e70:	7dbb      	ldrb	r3, [r7, #22]
 8000e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff ff4a 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	2004      	movs	r0, #4
 8000e84:	f7ff ff92 	bl	8000dac <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f7ff ff74 	bl	8000d78 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000e90:	2100      	movs	r1, #0
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff ff3e 	bl	8000d14 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	827b      	strh	r3, [r7, #18]
 8000e9c:	e00a      	b.n	8000eb4 <MFRC522_ToCard+0x82>
 8000e9e:	8a7b      	ldrh	r3, [r7, #18]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2009      	movs	r0, #9
 8000eaa:	f7ff ff33 	bl	8000d14 <MFRC522_WriteRegister>
 8000eae:	8a7b      	ldrh	r3, [r7, #18]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	827b      	strh	r3, [r7, #18]
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	8a7a      	ldrh	r2, [r7, #18]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3ef      	bcc.n	8000e9e <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff ff26 	bl	8000d14 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b0c      	cmp	r3, #12
 8000ecc:	d103      	bne.n	8000ed6 <MFRC522_ToCard+0xa4>
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	200d      	movs	r0, #13
 8000ed2:	f7ff ff51 	bl	8000d78 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000ed6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eda:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000edc:	2004      	movs	r0, #4
 8000ede:	f7ff ff31 	bl	8000d44 <MFRC522_ReadRegister>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	753b      	strb	r3, [r7, #20]
		i--;
 8000ee6:	8a7b      	ldrh	r3, [r7, #18]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000eec:	8a7b      	ldrh	r3, [r7, #18]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00a      	beq.n	8000f08 <MFRC522_ToCard+0xd6>
 8000ef2:	7d3b      	ldrb	r3, [r7, #20]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d105      	bne.n	8000f08 <MFRC522_ToCard+0xd6>
 8000efc:	7d3a      	ldrb	r2, [r7, #20]
 8000efe:	7d7b      	ldrb	r3, [r7, #21]
 8000f00:	4013      	ands	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0e9      	beq.n	8000edc <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	200d      	movs	r0, #13
 8000f0c:	f7ff ff4e 	bl	8000dac <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000f10:	8a7b      	ldrh	r3, [r7, #18]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d057      	beq.n	8000fc6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000f16:	2006      	movs	r0, #6
 8000f18:	f7ff ff14 	bl	8000d44 <MFRC522_ReadRegister>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f003 031b 	and.w	r3, r3, #27
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d14d      	bne.n	8000fc2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000f2a:	7d3a      	ldrb	r2, [r7, #20]
 8000f2c:	7dbb      	ldrb	r3, [r7, #22]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MFRC522_ToCard+0x10c>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	d140      	bne.n	8000fc6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000f44:	200a      	movs	r0, #10
 8000f46:	f7ff fefd 	bl	8000d44 <MFRC522_ReadRegister>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f4e:	200c      	movs	r0, #12
 8000f50:	f7ff fef8 	bl	8000d44 <MFRC522_ReadRegister>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000f5c:	7c7b      	ldrb	r3, [r7, #17]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <MFRC522_ToCard+0x148>
 8000f62:	7d3b      	ldrb	r3, [r7, #20]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	7c7b      	ldrb	r3, [r7, #17]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	e005      	b.n	8000f86 <MFRC522_ToCard+0x154>
 8000f7a:	7d3b      	ldrb	r3, [r7, #20]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f84:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000f86:	7d3b      	ldrb	r3, [r7, #20]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <MFRC522_ToCard+0x15e>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000f90:	7d3b      	ldrb	r3, [r7, #20]
 8000f92:	2b10      	cmp	r3, #16
 8000f94:	d901      	bls.n	8000f9a <MFRC522_ToCard+0x168>
 8000f96:	2310      	movs	r3, #16
 8000f98:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	827b      	strh	r3, [r7, #18]
 8000f9e:	e00a      	b.n	8000fb6 <MFRC522_ToCard+0x184>
 8000fa0:	8a7b      	ldrh	r3, [r7, #18]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	18d4      	adds	r4, r2, r3
 8000fa6:	2009      	movs	r0, #9
 8000fa8:	f7ff fecc 	bl	8000d44 <MFRC522_ReadRegister>
 8000fac:	4603      	mov	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]
 8000fb0:	8a7b      	ldrh	r3, [r7, #18]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
 8000fb6:	7d3b      	ldrb	r3, [r7, #20]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	8a7a      	ldrh	r2, [r7, #18]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3ef      	bcc.n	8000fa0 <MFRC522_ToCard+0x16e>
 8000fc0:	e001      	b.n	8000fc6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff fe98 	bl	8000d14 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2293      	movs	r2, #147	; 0x93
 8000fe8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	2220      	movs	r2, #32
 8000ff0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ff2:	f107 030a 	add.w	r3, r7, #10
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	200c      	movs	r0, #12
 8001000:	f7ff ff17 	bl	8000e32 <MFRC522_ToCard>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
 8001012:	e009      	b.n	8001028 <MFRC522_Anticoll+0x58>
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	4053      	eors	r3, r2
 8001020:	737b      	strb	r3, [r7, #13]
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	3301      	adds	r3, #1
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d9f2      	bls.n	8001014 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	7b7a      	ldrb	r2, [r7, #13]
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <MFRC522_Anticoll+0x70>
 800103c:	2302      	movs	r3, #2
 800103e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800104e:	f000 f820 	bl	8001092 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001052:	218d      	movs	r1, #141	; 0x8d
 8001054:	202a      	movs	r0, #42	; 0x2a
 8001056:	f7ff fe5d 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800105a:	213e      	movs	r1, #62	; 0x3e
 800105c:	202b      	movs	r0, #43	; 0x2b
 800105e:	f7ff fe59 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8001062:	211e      	movs	r1, #30
 8001064:	202d      	movs	r0, #45	; 0x2d
 8001066:	f7ff fe55 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	202c      	movs	r0, #44	; 0x2c
 800106e:	f7ff fe51 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8001072:	2170      	movs	r1, #112	; 0x70
 8001074:	2026      	movs	r0, #38	; 0x26
 8001076:	f7ff fe4d 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	2015      	movs	r0, #21
 800107e:	f7ff fe49 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001082:	213d      	movs	r1, #61	; 0x3d
 8001084:	2011      	movs	r0, #17
 8001086:	f7ff fe45 	bl	8000d14 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800108a:	f000 f80a 	bl	80010a2 <MFRC522_AntennaOn>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001096:	210f      	movs	r1, #15
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fe3b 	bl	8000d14 <MFRC522_WriteRegister>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff fe4b 	bl	8000d44 <MFRC522_ReadRegister>
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <MFRC522_AntennaOn+0x22>
 80010bc:	2103      	movs	r1, #3
 80010be:	2014      	movs	r0, #20
 80010c0:	f7ff fe5a 	bl	8000d78 <MFRC522_SetBitMask>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <sim_print>:
		.enReaddata=false
};


void sim_print(const char *fmt, ...)
{
 80010cc:	b40f      	push	{r0, r1, r2, r3}
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  unsigned int len=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  va_list args;
  va_start(args, fmt);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <sim_print+0x44>)
 80010e8:	f004 f96e 	bl	80053c8 <vsniprintf>
  va_end(args);
  len=strlen(buffer);
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <sim_print+0x44>)
 80010ee:	f7ff f837 	bl	8000160 <strlen>
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2,buffer,len,100);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <sim_print+0x44>)
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <sim_print+0x48>)
 80010fe:	f003 fa8b 	bl	8004618 <HAL_UART_Transmit>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800110c:	b004      	add	sp, #16
 800110e:	4770      	bx	lr
 8001110:	200001a0 	.word	0x200001a0
 8001114:	200003c8 	.word	0x200003c8

08001118 <sim_send_sms>:
  HAL_UART_Transmit(&huart1,buffer,len,100);
}


bool sim_send_sms(char* sdt, char noi_dung[200])
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	sim_print("AT+CMGF=1\r\n"); HAL_Delay(200);
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <sim_send_sms+0x50>)
 8001124:	f7ff ffd2 	bl	80010cc <sim_print>
 8001128:	20c8      	movs	r0, #200	; 0xc8
 800112a:	f001 faef 	bl	800270c <HAL_Delay>
	sim_print("AT+CMGS=\"%s\"\r\n",sdt); HAL_Delay(200);
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <sim_send_sms+0x54>)
 8001132:	f7ff ffcb 	bl	80010cc <sim_print>
 8001136:	20c8      	movs	r0, #200	; 0xc8
 8001138:	f001 fae8 	bl	800270c <HAL_Delay>
	sim_print("%s", noi_dung); HAL_Delay(200);
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <sim_send_sms+0x58>)
 8001140:	f7ff ffc4 	bl	80010cc <sim_print>
 8001144:	20c8      	movs	r0, #200	; 0xc8
 8001146:	f001 fae1 	bl	800270c <HAL_Delay>
	char buf[1]={0x1a};
 800114a:	231a      	movs	r3, #26
 800114c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2,buf,1,100);
 800114e:	f107 010c 	add.w	r1, r7, #12
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2201      	movs	r2, #1
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <sim_send_sms+0x5c>)
 8001158:	f003 fa5e 	bl	8004618 <HAL_UART_Transmit>
   return true;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	08005cdc 	.word	0x08005cdc
 800116c:	08005ce8 	.word	0x08005ce8
 8001170:	08005cf8 	.word	0x08005cf8
 8001174:	200003c8 	.word	0x200003c8

08001178 <set_key>:
char kp=0;
uint32_t id=0;
char tam[20]="";

char set_key()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  id=0;
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <set_key+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
  kp=0;
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <set_key+0xf0>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
  int timeOut=0;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  while(1)
  {
    read_rfid();
 800118e:	f000 ff0f 	bl	8001fb0 <read_rfid>
    check_id();
 8001192:	f000 f929 	bl	80013e8 <check_id>
    if(rfid_valid!=RFID_IDE) break;
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <set_key+0xf4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d15c      	bne.n	8001258 <set_key+0xe0>
    kp=0;
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <set_key+0xf0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    kp = read_key();
 80011a4:	f7ff fa90 	bl	80006c8 <read_key>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <set_key+0xf0>)
 80011ae:	701a      	strb	r2, [r3, #0]
    if(kp) return kp;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <set_key+0xf0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <set_key+0x46>
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <set_key+0xf0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	e04d      	b.n	800125a <set_key+0xe2>

    if(timeOut<100) timeOut++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b63      	cmp	r3, #99	; 0x63
 80011c2:	dc07      	bgt.n	80011d4 <set_key+0x5c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
    	kp='1';
		break;
	}


    if(sim.dataDoneFrame)
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <set_key+0xf8>)
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d017      	beq.n	8001202 <set_key+0x8a>
 80011d2:	e003      	b.n	80011dc <set_key+0x64>
    	kp='1';
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <set_key+0xf0>)
 80011d6:	2231      	movs	r2, #49	; 0x31
 80011d8:	701a      	strb	r2, [r3, #0]
		break;
 80011da:	e03e      	b.n	800125a <set_key+0xe2>
    {
    	//sim_print(sim.arrRec);
    	//sim_print("\n\r");

    	//if(strstr(sim.arrRec,passSim) && strstr(sim.arrRec,"open"))
    	if(strstr(sim.arrRec,"open"))
 80011dc:	4925      	ldr	r1, [pc, #148]	; (8001274 <set_key+0xfc>)
 80011de:	4826      	ldr	r0, [pc, #152]	; (8001278 <set_key+0x100>)
 80011e0:	f004 f8b1 	bl	8005346 <strstr>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <set_key+0x78>
    	{
    		simOpen=true;
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <set_key+0x104>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
    	}

    	sim.dataDoneFrame=false;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <set_key+0xf8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	705a      	strb	r2, [r3, #1]
    	memset(sim.arrRec,0,sizeof(sim.arrRec));
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	2100      	movs	r1, #0
 80011fa:	481f      	ldr	r0, [pc, #124]	; (8001278 <set_key+0x100>)
 80011fc:	f004 f86c 	bl	80052d8 <memset>
    	break;
 8001200:	e02b      	b.n	800125a <set_key+0xe2>
    }

    if(VanTay.dataDoneFrame)
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <set_key+0x108>)
 8001204:	7b1b      	ldrb	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0c1      	beq.n	800118e <set_key+0x16>
    {
    	if(strstr(VanTay.arrRec,"ok"))
 800120a:	491e      	ldr	r1, [pc, #120]	; (8001284 <set_key+0x10c>)
 800120c:	481e      	ldr	r0, [pc, #120]	; (8001288 <set_key+0x110>)
 800120e:	f004 f89a 	bl	8005346 <strstr>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <set_key+0xa8>
    	{
    		VanTay.valid=VanTayHopLe;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <set_key+0x108>)
 800121a:	2201      	movs	r2, #1
 800121c:	739a      	strb	r2, [r3, #14]
 800121e:	e009      	b.n	8001234 <set_key+0xbc>
    	}
    	else if(strstr(VanTay.arrRec,"false"))
 8001220:	491a      	ldr	r1, [pc, #104]	; (800128c <set_key+0x114>)
 8001222:	4819      	ldr	r0, [pc, #100]	; (8001288 <set_key+0x110>)
 8001224:	f004 f88f 	bl	8005346 <strstr>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <set_key+0xbc>
    	{
    		VanTay.valid=VanTayKhongHopLe;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <set_key+0x108>)
 8001230:	2202      	movs	r2, #2
 8001232:	739a      	strb	r2, [r3, #14]
    	}

    	VanTay.charRec=false;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <set_key+0x108>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    	VanTay.enReadData=false;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <set_key+0x108>)
 800123c:	2200      	movs	r2, #0
 800123e:	705a      	strb	r2, [r3, #1]
    	memset(VanTay.arrRec,0,sizeof(VanTay.arrRec));
 8001240:	220a      	movs	r2, #10
 8001242:	2100      	movs	r1, #0
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <set_key+0x110>)
 8001246:	f004 f847 	bl	80052d8 <memset>
    	VanTay.dataDoneFrame=false;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <set_key+0x108>)
 800124c:	2200      	movs	r2, #0
 800124e:	731a      	strb	r2, [r3, #12]
    	VanTay.countChar=0;
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <set_key+0x108>)
 8001252:	2200      	movs	r2, #0
 8001254:	735a      	strb	r2, [r3, #13]
    	break;
 8001256:	e000      	b.n	800125a <set_key+0xe2>
    if(rfid_valid!=RFID_IDE) break;
 8001258:	bf00      	nop
    }
  }

}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002c8 	.word	0x200002c8
 8001268:	200002c5 	.word	0x200002c5
 800126c:	200002c4 	.word	0x200002c4
 8001270:	20000134 	.word	0x20000134
 8001274:	08005cfc 	.word	0x08005cfc
 8001278:	20000137 	.word	0x20000137
 800127c:	200002c3 	.word	0x200002c3
 8001280:	200002b4 	.word	0x200002b4
 8001284:	08005d04 	.word	0x08005d04
 8001288:	200002b6 	.word	0x200002b6
 800128c:	08005d08 	.word	0x08005d08

08001290 <man_hinh_cho>:


void man_hinh_cho()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  _clear;
 8001294:	f7ff fb23 	bl	80008de <lcd_clear>
  kp=0;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <man_hinh_cho+0xc8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  while(1)
  {
    lcd_str(1,1,"Nhan phim * de");
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <man_hinh_cho+0xcc>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fb61 	bl	800096a <lcd_string>
    lcd_str(2,1,"mo ban phim !");
 80012a8:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <man_hinh_cho+0xd0>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff fb5c 	bl	800096a <lcd_string>
    set_key();        //lien tuc kiem tra nut nhan
 80012b2:	f7ff ff61 	bl	8001178 <set_key>
    if(kp=='*') break; //42 la ma ascii cua phim '*'
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <man_hinh_cho+0xc8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b2a      	cmp	r3, #42	; 0x2a
 80012bc:	d042      	beq.n	8001344 <man_hinh_cho+0xb4>
    if(rfid_valid==THE_DUNG) break;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <man_hinh_cho+0xd4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d040      	beq.n	8001348 <man_hinh_cho+0xb8>
    else if(VanTay.valid==VanTayHopLe) break;
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <man_hinh_cho+0xd8>)
 80012c8:	7b9b      	ldrb	r3, [r3, #14]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d03e      	beq.n	800134c <man_hinh_cho+0xbc>
    else if(VanTay.valid==VanTayKhongHopLe)
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <man_hinh_cho+0xd8>)
 80012d0:	7b9b      	ldrb	r3, [r3, #14]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d115      	bne.n	8001302 <man_hinh_cho+0x72>
    {
    	VanTay.valid=NULL;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <man_hinh_cho+0xd8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	739a      	strb	r2, [r3, #14]
        _clear;
 80012dc:	f7ff faff 	bl	80008de <lcd_clear>
        lcd_str(1,1,"Van tay khong");
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <man_hinh_cho+0xdc>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fb40 	bl	800096a <lcd_string>
        lcd_str(2,1,"hop le");
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <man_hinh_cho+0xe0>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff fb3b 	bl	800096a <lcd_string>
        delay(1500);
 80012f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012f8:	f001 fa08 	bl	800270c <HAL_Delay>
        _clear;
 80012fc:	f7ff faef 	bl	80008de <lcd_clear>
 8001300:	e7cd      	b.n	800129e <man_hinh_cho+0xe>
    }
    else if(rfid_valid==THE_SAI)
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <man_hinh_cho+0xd4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d117      	bne.n	800133a <man_hinh_cho+0xaa>
    {
      memset(rfid_code,0,sizeof(rfid_code));
 800130a:	2214      	movs	r2, #20
 800130c:	2100      	movs	r1, #0
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <man_hinh_cho+0xe4>)
 8001310:	f003 ffe2 	bl	80052d8 <memset>
      _clear;
 8001314:	f7ff fae3 	bl	80008de <lcd_clear>
      lcd_str(1,1,"The rfid");
 8001318:	4a17      	ldr	r2, [pc, #92]	; (8001378 <man_hinh_cho+0xe8>)
 800131a:	2101      	movs	r1, #1
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fb24 	bl	800096a <lcd_string>
      lcd_str(2,1,"khong dung !");
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <man_hinh_cho+0xec>)
 8001324:	2101      	movs	r1, #1
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff fb1f 	bl	800096a <lcd_string>
      delay(1500);
 800132c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001330:	f001 f9ec 	bl	800270c <HAL_Delay>
      _clear;
 8001334:	f7ff fad3 	bl	80008de <lcd_clear>
 8001338:	e7b1      	b.n	800129e <man_hinh_cho+0xe>
    }
    else if(simOpen) break;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <man_hinh_cho+0xf0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <man_hinh_cho+0xc0>
    lcd_str(1,1,"Nhan phim * de");
 8001342:	e7ac      	b.n	800129e <man_hinh_cho+0xe>
    if(kp=='*') break; //42 la ma ascii cua phim '*'
 8001344:	bf00      	nop
 8001346:	e004      	b.n	8001352 <man_hinh_cho+0xc2>
    if(rfid_valid==THE_DUNG) break;
 8001348:	bf00      	nop
 800134a:	e002      	b.n	8001352 <man_hinh_cho+0xc2>
    else if(VanTay.valid==VanTayHopLe) break;
 800134c:	bf00      	nop
 800134e:	e000      	b.n	8001352 <man_hinh_cho+0xc2>
    else if(simOpen) break;
 8001350:	bf00      	nop
  }
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002c5 	.word	0x200002c5
 800135c:	08005d10 	.word	0x08005d10
 8001360:	08005d20 	.word	0x08005d20
 8001364:	200002c4 	.word	0x200002c4
 8001368:	200002b4 	.word	0x200002b4
 800136c:	08005d30 	.word	0x08005d30
 8001370:	08005d40 	.word	0x08005d40
 8001374:	20000310 	.word	0x20000310
 8001378:	08005d48 	.word	0x08005d48
 800137c:	08005d54 	.word	0x08005d54
 8001380:	200002c3 	.word	0x200002c3

08001384 <doi_pass>:

void doi_pass()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	old_pass();
 8001388:	f000 fb20 	bl	80019cc <old_pass>
	_clear;
 800138c:	f7ff faa7 	bl	80008de <lcd_clear>
	lcd_str(1,1,"1-CLOSE 3-NEXT");
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <doi_pass+0x24>)
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fae8 	bl	800096a <lcd_string>
	lcd_str(2,1,"2-CHANGE PASS");
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <doi_pass+0x28>)
 800139c:	2101      	movs	r1, #1
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fae3 	bl	800096a <lcd_string>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08005d64 	.word	0x08005d64
 80013ac:	08005d74 	.word	0x08005d74

080013b0 <dong_cua>:

void dong_cua()
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <mo_cua>:


void mo_cua()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DP1_GPIO_Port, DP1_Pin, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <mo_cua+0x28>)
 80013c8:	f001 fd1f 	bl	8002e0a <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80013cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013d0:	f001 f99c 	bl	800270c <HAL_Delay>
	HAL_GPIO_WritePin(DP1_GPIO_Port, DP1_Pin, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4802      	ldr	r0, [pc, #8]	; (80013e4 <mo_cua+0x28>)
 80013dc:	f001 fd15 	bl	8002e0a <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40011000 	.word	0x40011000

080013e8 <check_id>:

char check_id()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  if(strcmp(rfid_code,rfid_code1)==0 || strcmp(rfid_code,rfid_code2)==0 || strcmp(rfid_code,rfid_code3)==0)
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <check_id+0x68>)
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <check_id+0x6c>)
 80013f0:	f7fe feac 	bl	800014c <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00d      	beq.n	8001416 <check_id+0x2e>
 80013fa:	4917      	ldr	r1, [pc, #92]	; (8001458 <check_id+0x70>)
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <check_id+0x6c>)
 80013fe:	f7fe fea5 	bl	800014c <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <check_id+0x2e>
 8001408:	4914      	ldr	r1, [pc, #80]	; (800145c <check_id+0x74>)
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <check_id+0x6c>)
 800140c:	f7fe fe9e 	bl	800014c <strcmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <check_id+0x42>
  {
	  memset(rfid_code,0,sizeof(rfid_code));
 8001416:	2214      	movs	r2, #20
 8001418:	2100      	movs	r1, #0
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <check_id+0x6c>)
 800141c:	f003 ff5c 	bl	80052d8 <memset>
	  rfid_valid=THE_DUNG;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <check_id+0x78>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
	  return 1;
 8001426:	2301      	movs	r3, #1
 8001428:	e010      	b.n	800144c <check_id+0x64>
  }
  else if(strlen(rfid_code)>0)
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <check_id+0x6c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <check_id+0x5c>
  {
	  memset(rfid_code,0,sizeof(rfid_code));
 8001432:	2214      	movs	r2, #20
 8001434:	2100      	movs	r1, #0
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <check_id+0x6c>)
 8001438:	f003 ff4e 	bl	80052d8 <memset>
	  rfid_valid=THE_SAI;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <check_id+0x78>)
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e002      	b.n	800144a <check_id+0x62>
  }
  else rfid_valid=RFID_IDE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <check_id+0x78>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

 return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000310 	.word	0x20000310
 8001458:	20000014 	.word	0x20000014
 800145c:	20000028 	.word	0x20000028
 8001460:	200002c4 	.word	0x200002c4

08001464 <xoa_tam>:
	_clear;
	nhap_phim();
}

void xoa_tam()
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  for(int i=0;i<20;i++)
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e007      	b.n	8001480 <xoa_tam+0x1c>
  tam[i]=0;
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <xoa_tam+0x30>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<20;i++)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3301      	adds	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b13      	cmp	r3, #19
 8001484:	ddf4      	ble.n	8001470 <xoa_tam+0xc>
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200002cc 	.word	0x200002cc

08001498 <nhap_phim>:

//ham nhap va luu gia tri phim vao mang tam
void nhap_phim()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
char bo_nho;
char dem=0; //dung de dem so ki tu khop voi pass
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
char kt =0;//dung de dem so lan nhap ssai pass
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
int d=1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
kp =0;
 80014aa:	4ba0      	ldr	r3, [pc, #640]	; (800172c <nhap_phim+0x294>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]



//*********check the RFID**********

if(rfid_valid==THE_DUNG)
 80014b0:	4b9f      	ldr	r3, [pc, #636]	; (8001730 <nhap_phim+0x298>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d115      	bne.n	80014e4 <nhap_phim+0x4c>
{
  rfid_valid=RFID_IDE;
 80014b8:	4b9d      	ldr	r3, [pc, #628]	; (8001730 <nhap_phim+0x298>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
  _clear;
 80014be:	f7ff fa0e 	bl	80008de <lcd_clear>
  lcd_str(1,1,"Mo cua bang the");
 80014c2:	4a9c      	ldr	r2, [pc, #624]	; (8001734 <nhap_phim+0x29c>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fa4f 	bl	800096a <lcd_string>
  lcd_str(2,1,"rfid");
 80014cc:	4a9a      	ldr	r2, [pc, #616]	; (8001738 <nhap_phim+0x2a0>)
 80014ce:	2101      	movs	r1, #1
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff fa4a 	bl	800096a <lcd_string>
  delay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014da:	f001 f917 	bl	800270c <HAL_Delay>
  _clear;
 80014de:	f7ff f9fe 	bl	80008de <lcd_clear>
  goto menu;
 80014e2:	e1c2      	b.n	800186a <nhap_phim+0x3d2>
}
else if(simOpen)
 80014e4:	4b95      	ldr	r3, [pc, #596]	; (800173c <nhap_phim+0x2a4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d014      	beq.n	8001516 <nhap_phim+0x7e>
{
	simOpen=false;
 80014ec:	4b93      	ldr	r3, [pc, #588]	; (800173c <nhap_phim+0x2a4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
	  _clear;
 80014f2:	f7ff f9f4 	bl	80008de <lcd_clear>
	  lcd_str(1,1,"Mo cua bang sim");
 80014f6:	4a92      	ldr	r2, [pc, #584]	; (8001740 <nhap_phim+0x2a8>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fa35 	bl	800096a <lcd_string>
	  sim_send_sms(phone_number, "Da mo cua");
 8001500:	4990      	ldr	r1, [pc, #576]	; (8001744 <nhap_phim+0x2ac>)
 8001502:	4891      	ldr	r0, [pc, #580]	; (8001748 <nhap_phim+0x2b0>)
 8001504:	f7ff fe08 	bl	8001118 <sim_send_sms>
	  delay(1000);
 8001508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150c:	f001 f8fe 	bl	800270c <HAL_Delay>
	  _clear;
 8001510:	f7ff f9e5 	bl	80008de <lcd_clear>
	  goto menu;
 8001514:	e1a9      	b.n	800186a <nhap_phim+0x3d2>
}
else if(VanTay.valid)
 8001516:	4b8d      	ldr	r3, [pc, #564]	; (800174c <nhap_phim+0x2b4>)
 8001518:	7b9b      	ldrb	r3, [r3, #14]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <nhap_phim+0xb2>
{
	VanTay.valid=NULL;
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <nhap_phim+0x2b4>)
 8001520:	2200      	movs	r2, #0
 8001522:	739a      	strb	r2, [r3, #14]
	  _clear;
 8001524:	f7ff f9db 	bl	80008de <lcd_clear>
	  lcd_str(1,1,"Mo cua bang");
 8001528:	4a89      	ldr	r2, [pc, #548]	; (8001750 <nhap_phim+0x2b8>)
 800152a:	2101      	movs	r1, #1
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fa1c 	bl	800096a <lcd_string>
	  lcd_str(2,1,"van tay");
 8001532:	4a88      	ldr	r2, [pc, #544]	; (8001754 <nhap_phim+0x2bc>)
 8001534:	2101      	movs	r1, #1
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff fa17 	bl	800096a <lcd_string>
	  delay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	f001 f8e4 	bl	800270c <HAL_Delay>
	  _clear;
 8001544:	f7ff f9cb 	bl	80008de <lcd_clear>
	  goto menu;
 8001548:	e18f      	b.n	800186a <nhap_phim+0x3d2>
}
//*********************************


xoa_tam();
 800154a:	f7ff ff8b 	bl	8001464 <xoa_tam>

//===================================================================================
while(kt<3)
 800154e:	e0e8      	b.n	8001722 <nhap_phim+0x28a>
{
  //lcd.cursor();
  _clear;
 8001550:	f7ff f9c5 	bl	80008de <lcd_clear>
  lcd_str(1,1,"password:");
 8001554:	4a80      	ldr	r2, [pc, #512]	; (8001758 <nhap_phim+0x2c0>)
 8001556:	2101      	movs	r1, #1
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fa06 	bl	800096a <lcd_string>

  d=0; //luu ki tu dau tien cua pass vao vi tri 1 cua mang tam
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    //hien thi so ki tu da nhap
    if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b0a      	cmp	r3, #10
 8001566:	dd10      	ble.n	800158a <nhap_phim+0xf2>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a7b      	ldr	r2, [pc, #492]	; (800175c <nhap_phim+0x2c4>)
 800156e:	fb82 1203 	smull	r1, r2, r2, r3
 8001572:	1092      	asrs	r2, r2, #2
 8001574:	17db      	asrs	r3, r3, #31
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3330      	adds	r3, #48	; 0x30
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	210f      	movs	r1, #15
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fa07 	bl	8000996 <lcd_char>
 8001588:	e004      	b.n	8001594 <nhap_phim+0xfc>
 800158a:	2220      	movs	r2, #32
 800158c:	210f      	movs	r1, #15
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fa01 	bl	8000996 <lcd_char>
    lcd_chr(1,16,(d-1)%10+0x30);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	4b70      	ldr	r3, [pc, #448]	; (800175c <nhap_phim+0x2c4>)
 800159a:	fb83 1302 	smull	r1, r3, r3, r2
 800159e:	1099      	asrs	r1, r3, #2
 80015a0:	17d3      	asrs	r3, r2, #31
 80015a2:	1ac9      	subs	r1, r1, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	1ad1      	subs	r1, r2, r3
 80015ae:	b2cb      	uxtb	r3, r1
 80015b0:	3330      	adds	r3, #48	; 0x30
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	2110      	movs	r1, #16
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff f9ec 	bl	8000996 <lcd_char>


    if(d<16) set_key();//doc ma phim bam
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	dc02      	bgt.n	80015ca <nhap_phim+0x132>
 80015c4:	f7ff fdd8 	bl	8001178 <set_key>
 80015c8:	e00d      	b.n	80015e6 <nhap_phim+0x14e>
    //neu viet du 16 ki tu
    else while(1) {set_key(); if(kp==enter || kp==backspace) break; delay(2);}
 80015ca:	f7ff fdd5 	bl	8001178 <set_key>
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <nhap_phim+0x294>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b42      	cmp	r3, #66	; 0x42
 80015d4:	d007      	beq.n	80015e6 <nhap_phim+0x14e>
 80015d6:	4b55      	ldr	r3, [pc, #340]	; (800172c <nhap_phim+0x294>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b41      	cmp	r3, #65	; 0x41
 80015dc:	d003      	beq.n	80015e6 <nhap_phim+0x14e>
 80015de:	2002      	movs	r0, #2
 80015e0:	f001 f894 	bl	800270c <HAL_Delay>
 80015e4:	e7f1      	b.n	80015ca <nhap_phim+0x132>
    if(kp==enter) break;
 80015e6:	4b51      	ldr	r3, [pc, #324]	; (800172c <nhap_phim+0x294>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b42      	cmp	r3, #66	; 0x42
 80015ec:	d036      	beq.n	800165c <nhap_phim+0x1c4>
    if(kp==backspace && tam[d-1]!=0)
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <nhap_phim+0x294>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b41      	cmp	r3, #65	; 0x41
 80015f4:	d118      	bne.n	8001628 <nhap_phim+0x190>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	4a59      	ldr	r2, [pc, #356]	; (8001760 <nhap_phim+0x2c8>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <nhap_phim+0x190>
    {
      if(d>0) d--;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	dd02      	ble.n	800160e <nhap_phim+0x176>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
      tam[d]=0;
 800160e:	4a54      	ldr	r2, [pc, #336]	; (8001760 <nhap_phim+0x2c8>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4413      	add	r3, r2
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
      lcd_chr(2,d,' ');
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2220      	movs	r2, #32
 800161e:	4619      	mov	r1, r3
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff f9b8 	bl	8000996 <lcd_char>
 8001626:	e018      	b.n	800165a <nhap_phim+0x1c2>

    }
    else if(kp!=backspace && kp!=0)
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <nhap_phim+0x294>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b41      	cmp	r3, #65	; 0x41
 800162e:	d098      	beq.n	8001562 <nhap_phim+0xca>
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <nhap_phim+0x294>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d094      	beq.n	8001562 <nhap_phim+0xca>
    {
      tam[d]=kp;
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <nhap_phim+0x294>)
 800163a:	7819      	ldrb	r1, [r3, #0]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <nhap_phim+0x2c8>)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	460a      	mov	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
      lcd_chr(2,d,'*');
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	222a      	movs	r2, #42	; 0x2a
 800164c:	4619      	mov	r1, r3
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff f9a1 	bl	8000996 <lcd_char>
      //lcd_chr(2,d,kp);
      d++;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
    if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 800165a:	e782      	b.n	8001562 <nhap_phim+0xca>
    if(kp==enter) break;
 800165c:	bf00      	nop
    }

  }


  delay_ms(200);
 800165e:	20c8      	movs	r0, #200	; 0xc8
 8001660:	f001 f854 	bl	800270c <HAL_Delay>
  _clear;
 8001664:	f7ff f93b 	bl	80008de <lcd_clear>
  lcd_str(1,1,"DANG KIEM TRA....");
 8001668:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <nhap_phim+0x2cc>)
 800166a:	2101      	movs	r1, #1
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff f97c 	bl	800096a <lcd_string>
  delay_ms(300);
 8001672:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001676:	f001 f849 	bl	800270c <HAL_Delay>
  //sim_print("\nPASS_DEFAULT:"); sim_print(PASS_DEFAULT); sim_print("\n");
  //sim_print("\n\r");


  //--------------TRUONG HOP NHAP SAI PASS----------------------------------------
  if(strcmp(tam,PASS_DEFAULT)!=0)
 800167a:	493b      	ldr	r1, [pc, #236]	; (8001768 <nhap_phim+0x2d0>)
 800167c:	4838      	ldr	r0, [pc, #224]	; (8001760 <nhap_phim+0x2c8>)
 800167e:	f7fe fd65 	bl	800014c <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03f      	beq.n	8001708 <nhap_phim+0x270>
  {
    _clear;
 8001688:	f7ff f929 	bl	80008de <lcd_clear>
    lcd_str(1,1,"NHAP SAI PASS");
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <nhap_phim+0x2d4>)
 800168e:	2101      	movs	r1, #1
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff f96a 	bl	800096a <lcd_string>
    lcd_str(2,1,"LAN THU:");
 8001696:	4a36      	ldr	r2, [pc, #216]	; (8001770 <nhap_phim+0x2d8>)
 8001698:	2101      	movs	r1, #1
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff f965 	bl	800096a <lcd_string>
    lcd_chr(2,11,kt+1+0x30);//kt ban dau khoi tao la 0
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3331      	adds	r3, #49	; 0x31
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	210b      	movs	r1, #11
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff f973 	bl	8000996 <lcd_char>
    delay_ms(1000);
 80016b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b4:	f001 f82a 	bl	800270c <HAL_Delay>
    _clear;
 80016b8:	f7ff f911 	bl	80008de <lcd_clear>

    if(kt+1<3)// neu nhap pass chua qua 3 lan
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d809      	bhi.n	80016d6 <nhap_phim+0x23e>
    {
      lcd_str(1,1,"PASS KHONG SAI");
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <nhap_phim+0x2dc>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff f94f 	bl	800096a <lcd_string>
      lcd_str(2,1,"QUA 3 LAN");
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <nhap_phim+0x2e0>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff f94a 	bl	800096a <lcd_string>
    }

    if(kt+1==3)//neu nhap pass du 3 lan
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d109      	bne.n	80016f0 <nhap_phim+0x258>
    {
      lcd_str(1,1,"DA QUA SO LAN");
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <nhap_phim+0x2e4>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff f942 	bl	800096a <lcd_string>
      lcd_str(2,1,"NHAP CHO PHEP !");
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <nhap_phim+0x2e8>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7ff f93d 	bl	800096a <lcd_string>

      //EEPROM_Write(9,1);
    }

    delay_ms(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f001 f80a 	bl	800270c <HAL_Delay>
    kt++;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
    d=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
    dem=0;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e00c      	b.n	8001722 <nhap_phim+0x28a>

  //---------------------TRUONG HOP NHAP DUNG PASS-------------------
  else
  {
    //EEPROM_Write(9,1);//danh dau la nhap dung
    delay(5);
 8001708:	2005      	movs	r0, #5
 800170a:	f000 ffff 	bl	800270c <HAL_Delay>
    _clear;
 800170e:	f7ff f8e6 	bl	80008de <lcd_clear>
    lcd_str(1,4,">>CUA MO<<");
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <nhap_phim+0x2ec>)
 8001714:	2104      	movs	r1, #4
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff f927 	bl	800096a <lcd_string>
    //mo_cua();
    kt=9;
 800171c:	2309      	movs	r3, #9
 800171e:	73fb      	strb	r3, [r7, #15]
    break;
 8001720:	e003      	b.n	800172a <nhap_phim+0x292>
while(kt<3)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b02      	cmp	r3, #2
 8001726:	f67f af13 	bls.w	8001550 <nhap_phim+0xb8>




//-----------------------Xu li khi nhap sai pass---------------------
while(kt!=9)
 800172a:	e099      	b.n	8001860 <nhap_phim+0x3c8>
 800172c:	200002c5 	.word	0x200002c5
 8001730:	200002c4 	.word	0x200002c4
 8001734:	08005d84 	.word	0x08005d84
 8001738:	08005d94 	.word	0x08005d94
 800173c:	200002c3 	.word	0x200002c3
 8001740:	08005d9c 	.word	0x08005d9c
 8001744:	08005dac 	.word	0x08005dac
 8001748:	200002a0 	.word	0x200002a0
 800174c:	200002b4 	.word	0x200002b4
 8001750:	08005db8 	.word	0x08005db8
 8001754:	08005dc4 	.word	0x08005dc4
 8001758:	08005dcc 	.word	0x08005dcc
 800175c:	66666667 	.word	0x66666667
 8001760:	200002cc 	.word	0x200002cc
 8001764:	08005dd8 	.word	0x08005dd8
 8001768:	2000003c 	.word	0x2000003c
 800176c:	08005dec 	.word	0x08005dec
 8001770:	08005dfc 	.word	0x08005dfc
 8001774:	08005e08 	.word	0x08005e08
 8001778:	08005e18 	.word	0x08005e18
 800177c:	08005e24 	.word	0x08005e24
 8001780:	08005e34 	.word	0x08005e34
 8001784:	08005e44 	.word	0x08005e44
{
  _clear;
 8001788:	f7ff f8a9 	bl	80008de <lcd_clear>
  sim_send_sms(phone_number, "Canh bao khoa ban phim");
 800178c:	497a      	ldr	r1, [pc, #488]	; (8001978 <nhap_phim+0x4e0>)
 800178e:	487b      	ldr	r0, [pc, #492]	; (800197c <nhap_phim+0x4e4>)
 8001790:	f7ff fcc2 	bl	8001118 <sim_send_sms>
  lcd_str(1,1,"Dang gui sms");
 8001794:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <nhap_phim+0x4e8>)
 8001796:	2101      	movs	r1, #1
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff f8e6 	bl	800096a <lcd_string>
  HAL_Delay(1000);
 800179e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a2:	f000 ffb3 	bl	800270c <HAL_Delay>
  _clear;
 80017a6:	f7ff f89a 	bl	80008de <lcd_clear>
  lcd_str(1,5,"DA KHOA");
 80017aa:	4a76      	ldr	r2, [pc, #472]	; (8001984 <nhap_phim+0x4ec>)
 80017ac:	2105      	movs	r1, #5
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff f8db 	bl	800096a <lcd_string>
  lcd_str(2,4,"BAN PHIM !");
 80017b4:	4a74      	ldr	r2, [pc, #464]	; (8001988 <nhap_phim+0x4f0>)
 80017b6:	2104      	movs	r1, #4
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff f8d6 	bl	800096a <lcd_string>
  HAL_GPIO_WritePin(DP2_GPIO_Port,DP2_Pin, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c4:	4871      	ldr	r0, [pc, #452]	; (800198c <nhap_phim+0x4f4>)
 80017c6:	f001 fb20 	bl	8002e0a <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80017ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017ce:	f000 ff9d 	bl	800270c <HAL_Delay>
  HAL_GPIO_WritePin(DP2_GPIO_Port,DP2_Pin, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d8:	486c      	ldr	r0, [pc, #432]	; (800198c <nhap_phim+0x4f4>)
 80017da:	f001 fb16 	bl	8002e0a <HAL_GPIO_WritePin>

  while(1)
  {
	set_key();        //lien tuc kiem tra nut nhan
 80017de:	f7ff fccb 	bl	8001178 <set_key>
	if(rfid_valid==THE_DUNG)
 80017e2:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <nhap_phim+0x4f8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d114      	bne.n	8001814 <nhap_phim+0x37c>
	{
	  _clear;
 80017ea:	f7ff f878 	bl	80008de <lcd_clear>
	  lcd_str(1,1,"Mo khoa");
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <nhap_phim+0x4fc>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff f8b9 	bl	800096a <lcd_string>
	  lcd_str(2,1,"ban phim");
 80017f8:	4a67      	ldr	r2, [pc, #412]	; (8001998 <nhap_phim+0x500>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff f8b4 	bl	800096a <lcd_string>
		kt=9;
 8001802:	2309      	movs	r3, #9
 8001804:	73fb      	strb	r3, [r7, #15]
		delay(1000);
 8001806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180a:	f000 ff7f 	bl	800270c <HAL_Delay>
		_clear;
 800180e:	f7ff f866 	bl	80008de <lcd_clear>
		break;
 8001812:	e025      	b.n	8001860 <nhap_phim+0x3c8>
	}
	else if(rfid_valid==THE_SAI)
 8001814:	4b5e      	ldr	r3, [pc, #376]	; (8001990 <nhap_phim+0x4f8>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d1e0      	bne.n	80017de <nhap_phim+0x346>
	{
	  memset(rfid_code,0,sizeof(rfid_code));
 800181c:	2214      	movs	r2, #20
 800181e:	2100      	movs	r1, #0
 8001820:	485e      	ldr	r0, [pc, #376]	; (800199c <nhap_phim+0x504>)
 8001822:	f003 fd59 	bl	80052d8 <memset>
	  _clear;
 8001826:	f7ff f85a 	bl	80008de <lcd_clear>
	  lcd_str(1,1,"The rfid");
 800182a:	4a5d      	ldr	r2, [pc, #372]	; (80019a0 <nhap_phim+0x508>)
 800182c:	2101      	movs	r1, #1
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff f89b 	bl	800096a <lcd_string>
	  lcd_str(2,1,"khong dung !");
 8001834:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <nhap_phim+0x50c>)
 8001836:	2101      	movs	r1, #1
 8001838:	2002      	movs	r0, #2
 800183a:	f7ff f896 	bl	800096a <lcd_string>
	  delay(1500);
 800183e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001842:	f000 ff63 	bl	800270c <HAL_Delay>
	  _clear;
 8001846:	f7ff f84a 	bl	80008de <lcd_clear>
	  lcd_str(1,5,"DA KHOA");
 800184a:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <nhap_phim+0x4ec>)
 800184c:	2105      	movs	r1, #5
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff f88b 	bl	800096a <lcd_string>
	  lcd_str(2,4,"BAN PHIM !");
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <nhap_phim+0x4f0>)
 8001856:	2104      	movs	r1, #4
 8001858:	2002      	movs	r0, #2
 800185a:	f7ff f886 	bl	800096a <lcd_string>
	set_key();        //lien tuc kiem tra nut nhan
 800185e:	e7be      	b.n	80017de <nhap_phim+0x346>
while(kt!=9)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b09      	cmp	r3, #9
 8001864:	d190      	bne.n	8001788 <nhap_phim+0x2f0>




//-----------------------Xu li khi nhap dung pass---------------------
while(kt==9)
 8001866:	e07d      	b.n	8001964 <nhap_phim+0x4cc>
{
  menu:
 8001868:	bf00      	nop
  lcd_str(1,1,"Dang mo khoa !");
 800186a:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <nhap_phim+0x510>)
 800186c:	2101      	movs	r1, #1
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff f87b 	bl	800096a <lcd_string>
  mo_cua();
 8001874:	f7ff fda2 	bl	80013bc <mo_cua>
  _clear;
 8001878:	f7ff f831 	bl	80008de <lcd_clear>
	lcd_str(1,1,"1-CLOSE 3-NEXT");
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <nhap_phim+0x514>)
 800187e:	2101      	movs	r1, #1
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff f872 	bl	800096a <lcd_string>
	lcd_str(2,1,"2-CHANGE PASS");
 8001886:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <nhap_phim+0x518>)
 8001888:	2101      	movs	r1, #1
 800188a:	2002      	movs	r0, #2
 800188c:	f7ff f86d 	bl	800096a <lcd_string>
  while(1)
  {
    set_key();
 8001890:	f7ff fc72 	bl	8001178 <set_key>

    //*********check the RFID**********
    if(rfid_valid==THE_DUNG)
 8001894:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <nhap_phim+0x4f8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d117      	bne.n	80018cc <nhap_phim+0x434>
    {
    	rfid_valid=RFID_IDE;
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <nhap_phim+0x4f8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
      _clear;
 80018a2:	f7ff f81c 	bl	80008de <lcd_clear>
      lcd_str(1,1,"Dong cua bang");
 80018a6:	4a43      	ldr	r2, [pc, #268]	; (80019b4 <nhap_phim+0x51c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff f85d 	bl	800096a <lcd_string>
      lcd_str(2,1,"the RFID");
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <nhap_phim+0x520>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	2002      	movs	r0, #2
 80018b6:	f7ff f858 	bl	800096a <lcd_string>
      delay(1000);
 80018ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018be:	f000 ff25 	bl	800270c <HAL_Delay>
      _clear;
 80018c2:	f7ff f80c 	bl	80008de <lcd_clear>
      kp=49;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <nhap_phim+0x524>)
 80018c8:	2231      	movs	r2, #49	; 0x31
 80018ca:	701a      	strb	r2, [r3, #0]
    }
    //*********************************

    if(kp=='1') { kp=0; kt=0; _clear; lcd_str(1,1,"Dang dong cua"); dong_cua(); break; }      //49 la ma ascii cua phim so 1
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <nhap_phim+0x524>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b31      	cmp	r3, #49	; 0x31
 80018d2:	d10e      	bne.n	80018f2 <nhap_phim+0x45a>
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <nhap_phim+0x524>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	f7fe fffe 	bl	80008de <lcd_clear>
 80018e2:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <nhap_phim+0x528>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff f83f 	bl	800096a <lcd_string>
 80018ec:	f7ff fd60 	bl	80013b0 <dong_cua>
 80018f0:	e038      	b.n	8001964 <nhap_phim+0x4cc>
    if(kp=='2') doi_pass();  //50 la ma ascii cua phim so 1
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <nhap_phim+0x524>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b32      	cmp	r3, #50	; 0x32
 80018f8:	d101      	bne.n	80018fe <nhap_phim+0x466>
 80018fa:	f7ff fd43 	bl	8001384 <doi_pass>
    if(kp=='3')
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <nhap_phim+0x524>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b33      	cmp	r3, #51	; 0x33
 8001904:	d10b      	bne.n	800191e <nhap_phim+0x486>
    {
    	_clear;
 8001906:	f7fe ffea 	bl	80008de <lcd_clear>
        lcd_str(1,1,"4-BACK 5-SIM");
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <nhap_phim+0x52c>)
 800190c:	2101      	movs	r1, #1
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff f82b 	bl	800096a <lcd_string>
        lcd_str(2,1,"6-FINGER");
 8001914:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <nhap_phim+0x530>)
 8001916:	2101      	movs	r1, #1
 8001918:	2002      	movs	r0, #2
 800191a:	f7ff f826 	bl	800096a <lcd_string>
    }
    if(kp=='4')
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <nhap_phim+0x524>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b34      	cmp	r3, #52	; 0x34
 8001924:	d10b      	bne.n	800193e <nhap_phim+0x4a6>
    {
	  _clear;
 8001926:	f7fe ffda 	bl	80008de <lcd_clear>
		lcd_str(1,1,"1-CLOSE 3-NEXT");
 800192a:	4a20      	ldr	r2, [pc, #128]	; (80019ac <nhap_phim+0x514>)
 800192c:	2101      	movs	r1, #1
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff f81b 	bl	800096a <lcd_string>
		lcd_str(2,1,"2-CHANGE PASS");
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <nhap_phim+0x518>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f7ff f816 	bl	800096a <lcd_string>
    }
    if(kp=='5')
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <nhap_phim+0x524>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b35      	cmp	r3, #53	; 0x35
 8001944:	d1a4      	bne.n	8001890 <nhap_phim+0x3f8>
	{
		sim_manager();
 8001946:	f000 fa37 	bl	8001db8 <sim_manager>
    	_clear;
 800194a:	f7fe ffc8 	bl	80008de <lcd_clear>
        lcd_str(1,1,"4-BACK 5-SIM");
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <nhap_phim+0x52c>)
 8001950:	2101      	movs	r1, #1
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff f809 	bl	800096a <lcd_string>
        lcd_str(2,1,"6-FINGER");
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <nhap_phim+0x530>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f7ff f804 	bl	800096a <lcd_string>
    set_key();
 8001962:	e795      	b.n	8001890 <nhap_phim+0x3f8>
while(kt==9)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b09      	cmp	r3, #9
 8001968:	f43f af7e 	beq.w	8001868 <nhap_phim+0x3d0>
  }// while(1)


}//while(kt==9)

}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	08005e50 	.word	0x08005e50
 800197c:	200002a0 	.word	0x200002a0
 8001980:	08005e68 	.word	0x08005e68
 8001984:	08005e78 	.word	0x08005e78
 8001988:	08005e80 	.word	0x08005e80
 800198c:	40011000 	.word	0x40011000
 8001990:	200002c4 	.word	0x200002c4
 8001994:	08005e8c 	.word	0x08005e8c
 8001998:	08005e94 	.word	0x08005e94
 800199c:	20000310 	.word	0x20000310
 80019a0:	08005d48 	.word	0x08005d48
 80019a4:	08005d54 	.word	0x08005d54
 80019a8:	08005ea0 	.word	0x08005ea0
 80019ac:	08005d64 	.word	0x08005d64
 80019b0:	08005d74 	.word	0x08005d74
 80019b4:	08005eb0 	.word	0x08005eb0
 80019b8:	08005ec0 	.word	0x08005ec0
 80019bc:	200002c5 	.word	0x200002c5
 80019c0:	08005ecc 	.word	0x08005ecc
 80019c4:	08005edc 	.word	0x08005edc
 80019c8:	08005eec 	.word	0x08005eec

080019cc <old_pass>:


void old_pass()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	char tam[6];
	char dem=0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
	_clear;
 80019d6:	f7fe ff82 	bl	80008de <lcd_clear>
	lcd_str(1,1,"old password:");
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <old_pass+0x24>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f7fe ffc3 	bl	800096a <lcd_string>
	nhap_phim_cu();
 80019e4:	f000 f806 	bl	80019f4 <nhap_phim_cu>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	08005ef8 	.word	0x08005ef8

080019f4 <nhap_phim_cu>:



void nhap_phim_cu()
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
char bo_nho;
char dem=0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
char kt =0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
int d=1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
kp =0;
 8001a06:	4ba5      	ldr	r3, [pc, #660]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]


xoa_tam();
 8001a0c:	f7ff fd2a 	bl	8001464 <xoa_tam>

//===================================================================================
while(kt<3)
 8001a10:	e183      	b.n	8001d1a <nhap_phim_cu+0x326>
{
  //lcd.cursor();
  _clear;
 8001a12:	f7fe ff64 	bl	80008de <lcd_clear>
  lcd_str(1,1,"old password");
 8001a16:	4aa2      	ldr	r2, [pc, #648]	; (8001ca0 <nhap_phim_cu+0x2ac>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7fe ffa5 	bl	800096a <lcd_string>
  d=0; //luu ki tu dau tien cua pass vao vi tri 1 cua mang tam
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	dd10      	ble.n	8001a4c <nhap_phim_cu+0x58>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a9d      	ldr	r2, [pc, #628]	; (8001ca4 <nhap_phim_cu+0x2b0>)
 8001a30:	fb82 1203 	smull	r1, r2, r2, r3
 8001a34:	1092      	asrs	r2, r2, #2
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3330      	adds	r3, #48	; 0x30
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	210f      	movs	r1, #15
 8001a44:	2001      	movs	r0, #1
 8001a46:	f7fe ffa6 	bl	8000996 <lcd_char>
 8001a4a:	e004      	b.n	8001a56 <nhap_phim_cu+0x62>
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	210f      	movs	r1, #15
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7fe ffa0 	bl	8000996 <lcd_char>
    lcd_chr(1,16,(d-1)%10+0x30);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <nhap_phim_cu+0x2b0>)
 8001a5c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a60:	1099      	asrs	r1, r3, #2
 8001a62:	17d3      	asrs	r3, r2, #31
 8001a64:	1ac9      	subs	r1, r1, r3
 8001a66:	460b      	mov	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	1ad1      	subs	r1, r2, r3
 8001a70:	b2cb      	uxtb	r3, r1
 8001a72:	3330      	adds	r3, #48	; 0x30
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	2110      	movs	r1, #16
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7fe ff8b 	bl	8000996 <lcd_char>

    if(d<16) set_key();//doc ma phim bam
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	dc02      	bgt.n	8001a8c <nhap_phim_cu+0x98>
 8001a86:	f7ff fb77 	bl	8001178 <set_key>
 8001a8a:	e00d      	b.n	8001aa8 <nhap_phim_cu+0xb4>
    else while(1) {set_key(); if(kp==enter || kp==backspace) break; delay(2);}
 8001a8c:	f7ff fb74 	bl	8001178 <set_key>
 8001a90:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b42      	cmp	r3, #66	; 0x42
 8001a96:	d007      	beq.n	8001aa8 <nhap_phim_cu+0xb4>
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b41      	cmp	r3, #65	; 0x41
 8001a9e:	d003      	beq.n	8001aa8 <nhap_phim_cu+0xb4>
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f000 fe33 	bl	800270c <HAL_Delay>
 8001aa6:	e7f1      	b.n	8001a8c <nhap_phim_cu+0x98>
    if(kp==enter) break;
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b42      	cmp	r3, #66	; 0x42
 8001aae:	d032      	beq.n	8001b16 <nhap_phim_cu+0x122>
    if(kp==backspace && tam[d-1]!=0)
 8001ab0:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b41      	cmp	r3, #65	; 0x41
 8001ab6:	d118      	bne.n	8001aea <nhap_phim_cu+0xf6>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	4a7a      	ldr	r2, [pc, #488]	; (8001ca8 <nhap_phim_cu+0x2b4>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <nhap_phim_cu+0xf6>
    {
      if(d>1) d--;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	dd02      	ble.n	8001ad0 <nhap_phim_cu+0xdc>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
      tam[d]=0;
 8001ad0:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <nhap_phim_cu+0x2b4>)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
      lcd_chr(2,d,' ');
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7fe ff57 	bl	8000996 <lcd_char>
 8001ae8:	e014      	b.n	8001b14 <nhap_phim_cu+0x120>

    }
    else if(kp!=backspace)
 8001aea:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b41      	cmp	r3, #65	; 0x41
 8001af0:	d098      	beq.n	8001a24 <nhap_phim_cu+0x30>
    {
      tam[d]=kp;
 8001af2:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001af4:	7819      	ldrb	r1, [r3, #0]
 8001af6:	4a6c      	ldr	r2, [pc, #432]	; (8001ca8 <nhap_phim_cu+0x2b4>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
      lcd_chr(2,d,'*');
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	222a      	movs	r2, #42	; 0x2a
 8001b06:	4619      	mov	r1, r3
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7fe ff44 	bl	8000996 <lcd_char>
      d++;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
    if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 8001b14:	e786      	b.n	8001a24 <nhap_phim_cu+0x30>
    if(kp==enter) break;
 8001b16:	bf00      	nop





  delay_ms(200);
 8001b18:	20c8      	movs	r0, #200	; 0xc8
 8001b1a:	f000 fdf7 	bl	800270c <HAL_Delay>
  _clear;
 8001b1e:	f7fe fede 	bl	80008de <lcd_clear>
  lcd_str(1,1,"DANG KIEM TRA...");
 8001b22:	4a62      	ldr	r2, [pc, #392]	; (8001cac <nhap_phim_cu+0x2b8>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7fe ff1f 	bl	800096a <lcd_string>
  delay_ms(300);
 8001b2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b30:	f000 fdec 	bl	800270c <HAL_Delay>


  //------------------------------xu li khi nhap sai pass---------------------
  if(strcmp(tam,PASS_DEFAULT)!=0)
 8001b34:	495e      	ldr	r1, [pc, #376]	; (8001cb0 <nhap_phim_cu+0x2bc>)
 8001b36:	485c      	ldr	r0, [pc, #368]	; (8001ca8 <nhap_phim_cu+0x2b4>)
 8001b38:	f7fe fb08 	bl	800014c <strcmp>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03f      	beq.n	8001bc2 <nhap_phim_cu+0x1ce>
  {
    _clear;
 8001b42:	f7fe fecc 	bl	80008de <lcd_clear>
    lcd_str(1,1,"NHAP SAI PASS");
 8001b46:	4a5b      	ldr	r2, [pc, #364]	; (8001cb4 <nhap_phim_cu+0x2c0>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7fe ff0d 	bl	800096a <lcd_string>
    lcd_str(2,1,"LAN THU:");
 8001b50:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <nhap_phim_cu+0x2c4>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7fe ff08 	bl	800096a <lcd_string>
    lcd_chr(2,11,kt+1+0x30);
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3331      	adds	r3, #49	; 0x31
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	210b      	movs	r1, #11
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7fe ff16 	bl	8000996 <lcd_char>
    delay_ms(1000);
 8001b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6e:	f000 fdcd 	bl	800270c <HAL_Delay>
    _clear;
 8001b72:	f7fe feb4 	bl	80008de <lcd_clear>
    if(kt+1!=3)
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d009      	beq.n	8001b90 <nhap_phim_cu+0x19c>
    {
      lcd_str(1,1,"PASS KHONG SAI");
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <nhap_phim_cu+0x2c8>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7fe fef2 	bl	800096a <lcd_string>
      lcd_str(2,1,"QUA 3 LAN");
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <nhap_phim_cu+0x2cc>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7fe feed 	bl	800096a <lcd_string>
    }
    if(kt+1==3)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d109      	bne.n	8001baa <nhap_phim_cu+0x1b6>
    {
      lcd_str(1,1,"DA QUA SO LAN");
 8001b96:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <nhap_phim_cu+0x2d0>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7fe fee5 	bl	800096a <lcd_string>
      lcd_str(2,1,"NHAP CHO PHEP !");
 8001ba0:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <nhap_phim_cu+0x2d4>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7fe fee0 	bl	800096a <lcd_string>

    }
    delay_ms(1000);
 8001baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bae:	f000 fdad 	bl	800270c <HAL_Delay>
    kt++;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
    d=0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
    dem=0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	e0ab      	b.n	8001d1a <nhap_phim_cu+0x326>
  //----------------------xu li khi nhap dung pass---------------------------
  else
  {

    //EEPROM_Write(9,1);//khi nhap dung
    _clear;
 8001bc2:	f7fe fe8c 	bl	80008de <lcd_clear>
    // for(int i=1;i<16;i++) {EEPROM_Write(i,0); delay(5);}
    lcd_str(1,1,"NEW PASSWORD:");
 8001bc6:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <nhap_phim_cu+0x2d8>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7fe fecd 	bl	800096a <lcd_string>

    d=0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
    while(1)
    {
      if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	dd10      	ble.n	8001bfc <nhap_phim_cu+0x208>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <nhap_phim_cu+0x2b0>)
 8001be0:	fb82 1203 	smull	r1, r2, r2, r3
 8001be4:	1092      	asrs	r2, r2, #2
 8001be6:	17db      	asrs	r3, r3, #31
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3330      	adds	r3, #48	; 0x30
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7fe fece 	bl	8000996 <lcd_char>
 8001bfa:	e004      	b.n	8001c06 <nhap_phim_cu+0x212>
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	210f      	movs	r1, #15
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7fe fec8 	bl	8000996 <lcd_char>
      lcd_chr(1,16,(d-1)%10+0x30);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <nhap_phim_cu+0x2b0>)
 8001c0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c10:	1099      	asrs	r1, r3, #2
 8001c12:	17d3      	asrs	r3, r2, #31
 8001c14:	1ac9      	subs	r1, r1, r3
 8001c16:	460b      	mov	r3, r1
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	1ad1      	subs	r1, r2, r3
 8001c20:	b2cb      	uxtb	r3, r1
 8001c22:	3330      	adds	r3, #48	; 0x30
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	2110      	movs	r1, #16
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7fe feb3 	bl	8000996 <lcd_char>

      if(d<16) set_key();//doc ma phim bam
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	dc02      	bgt.n	8001c3c <nhap_phim_cu+0x248>
 8001c36:	f7ff fa9f 	bl	8001178 <set_key>
 8001c3a:	e00d      	b.n	8001c58 <nhap_phim_cu+0x264>
      else while(1) {set_key(); if(kp==enter || kp==backspace) break; delay(2);}
 8001c3c:	f7ff fa9c 	bl	8001178 <set_key>
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b42      	cmp	r3, #66	; 0x42
 8001c46:	d007      	beq.n	8001c58 <nhap_phim_cu+0x264>
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b41      	cmp	r3, #65	; 0x41
 8001c4e:	d003      	beq.n	8001c58 <nhap_phim_cu+0x264>
 8001c50:	2002      	movs	r0, #2
 8001c52:	f000 fd5b 	bl	800270c <HAL_Delay>
 8001c56:	e7f1      	b.n	8001c3c <nhap_phim_cu+0x248>
      if(kp==enter) break;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b42      	cmp	r3, #66	; 0x42
 8001c5e:	d056      	beq.n	8001d0e <nhap_phim_cu+0x31a>
      if(kp==backspace && tam[d-1]!=0)
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <nhap_phim_cu+0x2a8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b41      	cmp	r3, #65	; 0x41
 8001c66:	d133      	bne.n	8001cd0 <nhap_phim_cu+0x2dc>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <nhap_phim_cu+0x2b4>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02d      	beq.n	8001cd0 <nhap_phim_cu+0x2dc>
      {
        if(d>0) d--;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd02      	ble.n	8001c80 <nhap_phim_cu+0x28c>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
        //EEPROM_Write(d,0); delay(5);
        PASS_DEFAULT[d]=0;
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <nhap_phim_cu+0x2bc>)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
        lcd_chr(2,d,' ');
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4619      	mov	r1, r3
 8001c92:	2002      	movs	r0, #2
 8001c94:	f7fe fe7f 	bl	8000996 <lcd_char>
 8001c98:	e038      	b.n	8001d0c <nhap_phim_cu+0x318>
 8001c9a:	bf00      	nop
 8001c9c:	200002c5 	.word	0x200002c5
 8001ca0:	08005f08 	.word	0x08005f08
 8001ca4:	66666667 	.word	0x66666667
 8001ca8:	200002cc 	.word	0x200002cc
 8001cac:	08005f18 	.word	0x08005f18
 8001cb0:	2000003c 	.word	0x2000003c
 8001cb4:	08005dec 	.word	0x08005dec
 8001cb8:	08005dfc 	.word	0x08005dfc
 8001cbc:	08005e08 	.word	0x08005e08
 8001cc0:	08005e18 	.word	0x08005e18
 8001cc4:	08005e24 	.word	0x08005e24
 8001cc8:	08005e34 	.word	0x08005e34
 8001ccc:	08005f2c 	.word	0x08005f2c

      }
      else if(kp!=backspace)
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <nhap_phim_cu+0x3a4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b41      	cmp	r3, #65	; 0x41
 8001cd6:	f43f af7d 	beq.w	8001bd4 <nhap_phim_cu+0x1e0>
      {
        tam[d]=kp;
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <nhap_phim_cu+0x3a4>)
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <nhap_phim_cu+0x3a8>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
        //EEPROM_Write(d,kp); delay(5);
        PASS_DEFAULT[d]=kp;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <nhap_phim_cu+0x3a4>)
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <nhap_phim_cu+0x3ac>)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	701a      	strb	r2, [r3, #0]
        lcd_chr(2,d,kp);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <nhap_phim_cu+0x3a4>)
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7fe fe48 	bl	8000996 <lcd_char>
        d++;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
      if(d>=11) lcd_chr(1,15,(d-1)/10+0x30); else lcd_chr(1,15,' ');
 8001d0c:	e762      	b.n	8001bd4 <nhap_phim_cu+0x1e0>
      if(kp==enter) break;
 8001d0e:	bf00      	nop
      }
    }
      delay_ms(200);
 8001d10:	20c8      	movs	r0, #200	; 0xc8
 8001d12:	f000 fcfb 	bl	800270c <HAL_Delay>
      kt=9;
 8001d16:	2309      	movs	r3, #9
 8001d18:	73fb      	strb	r3, [r7, #15]
while(kt<3)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f67f ae78 	bls.w	8001a12 <nhap_phim_cu+0x1e>

}   //while(kt<3)



while(kt!=9)
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d00c      	beq.n	8001d42 <nhap_phim_cu+0x34e>
{
  _clear;
 8001d28:	f7fe fdd9 	bl	80008de <lcd_clear>
  lcd_str(1,5,"DA KHOA");
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <nhap_phim_cu+0x3b0>)
 8001d2e:	2105      	movs	r1, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7fe fe1a 	bl	800096a <lcd_string>
  lcd_str(2,4,"BAN PHIM !");
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <nhap_phim_cu+0x3b4>)
 8001d38:	2104      	movs	r1, #4
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f7fe fe15 	bl	800096a <lcd_string>
  //_0(coi);
  //EEPROM_Write(10,2);//----------------------khi sai qua 3 lan dua ve pass mac dinh
  while(1);
 8001d40:	e7fe      	b.n	8001d40 <nhap_phim_cu+0x34c>
}


while(kt==9)
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d122      	bne.n	8001d8e <nhap_phim_cu+0x39a>
{

  _clear;
 8001d48:	f7fe fdc9 	bl	80008de <lcd_clear>
  lcd_str(1,1,"DANG CAP NHAT");
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <nhap_phim_cu+0x3b8>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7fe fe0a 	bl	800096a <lcd_string>
  lcd_str(2,1,"PASSWORD MOI..");
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <nhap_phim_cu+0x3bc>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7fe fe05 	bl	800096a <lcd_string>
  delay_ms(1500);
 8001d60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d64:	f000 fcd2 	bl	800270c <HAL_Delay>
  _clear;
 8001d68:	f7fe fdb9 	bl	80008de <lcd_clear>
  lcd_str(1,1,"MAT KHAU MOI LA:");
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <nhap_phim_cu+0x3c0>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7fe fdfa 	bl	800096a <lcd_string>
  lcd_str(2,1,PASS_DEFAULT);
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <nhap_phim_cu+0x3ac>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f7fe fdf5 	bl	800096a <lcd_string>
  delay_ms(2000);
 8001d80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d84:	f000 fcc2 	bl	800270c <HAL_Delay>
  _clear;
 8001d88:	f7fe fda9 	bl	80008de <lcd_clear>
  break;
 8001d8c:	bf00      	nop
}


}//void
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002c5 	.word	0x200002c5
 8001d9c:	200002cc 	.word	0x200002cc
 8001da0:	2000003c 	.word	0x2000003c
 8001da4:	08005e78 	.word	0x08005e78
 8001da8:	08005e80 	.word	0x08005e80
 8001dac:	08005f3c 	.word	0x08005f3c
 8001db0:	08005f4c 	.word	0x08005f4c
 8001db4:	08005f5c 	.word	0x08005f5c

08001db8 <sim_manager>:


void sim_manager()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
	_clear;
 8001dbe:	f7fe fd8e 	bl	80008de <lcd_clear>
    while(1)
    {
    	lcd_string(1, 1, "1-PHONE 3-EXIT");
 8001dc2:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <sim_manager+0x16c>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7fe fdcf 	bl	800096a <lcd_string>
        lcd_string(2, 1, "2-EDIT PHONE");
 8001dcc:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <sim_manager+0x170>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7fe fdca 	bl	800096a <lcd_string>
    	set_key();
 8001dd6:	f7ff f9cf 	bl	8001178 <set_key>
    	if(kp=='1')
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <sim_manager+0x174>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b31      	cmp	r3, #49	; 0x31
 8001de0:	d111      	bne.n	8001e06 <sim_manager+0x4e>
    	{
    		_clear;
 8001de2:	f7fe fd7c 	bl	80008de <lcd_clear>
    		lcd_string(1, 1, "Phone registered");
 8001de6:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <sim_manager+0x178>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7fe fdbd 	bl	800096a <lcd_string>
    		lcd_string(2, 1, phone_number);
 8001df0:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <sim_manager+0x17c>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7fe fdb8 	bl	800096a <lcd_string>
    		HAL_Delay(3000);
 8001dfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dfe:	f000 fc85 	bl	800270c <HAL_Delay>
    		_clear;
 8001e02:	f7fe fd6c 	bl	80008de <lcd_clear>
    	}
    	if(kp=='3') break;
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <sim_manager+0x174>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b33      	cmp	r3, #51	; 0x33
 8001e0c:	f000 8085 	beq.w	8001f1a <sim_manager+0x162>
    	if(kp=='2')
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <sim_manager+0x174>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b32      	cmp	r3, #50	; 0x32
 8001e16:	d1d4      	bne.n	8001dc2 <sim_manager+0xa>
    	{
    		_clear;
 8001e18:	f7fe fd61 	bl	80008de <lcd_clear>
    		 lcd_string(1, 1, "Input Phone");
 8001e1c:	4a46      	ldr	r2, [pc, #280]	; (8001f38 <sim_manager+0x180>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7fe fda2 	bl	800096a <lcd_string>
    		  char d=0; //luu ki tu dau tien cua pass vao vi tri 1 cua mang tam
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]
    		  while(1)
    		  {
    		    if(d<16) set_key();//doc ma phim bam
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d802      	bhi.n	8001e36 <sim_manager+0x7e>
 8001e30:	f7ff f9a2 	bl	8001178 <set_key>
 8001e34:	e00d      	b.n	8001e52 <sim_manager+0x9a>
    		    //neu viet du 16 ki tu
    		    else while(1) {set_key(); if(kp==enter || kp==backspace) break; delay(2);}
 8001e36:	f7ff f99f 	bl	8001178 <set_key>
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <sim_manager+0x174>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b42      	cmp	r3, #66	; 0x42
 8001e40:	d007      	beq.n	8001e52 <sim_manager+0x9a>
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <sim_manager+0x174>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b41      	cmp	r3, #65	; 0x41
 8001e48:	d003      	beq.n	8001e52 <sim_manager+0x9a>
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f000 fc5e 	bl	800270c <HAL_Delay>
 8001e50:	e7f1      	b.n	8001e36 <sim_manager+0x7e>
    		    if(kp==enter)
 8001e52:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <sim_manager+0x174>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b42      	cmp	r3, #66	; 0x42
 8001e58:	d124      	bne.n	8001ea4 <sim_manager+0xec>
				{
    		    	memset(phone_number,0,sizeof(phone_number));
 8001e5a:	2214      	movs	r2, #20
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4835      	ldr	r0, [pc, #212]	; (8001f34 <sim_manager+0x17c>)
 8001e60:	f003 fa3a 	bl	80052d8 <memset>
    		    	memcpy(phone_number,tam,strlen(tam));
 8001e64:	4835      	ldr	r0, [pc, #212]	; (8001f3c <sim_manager+0x184>)
 8001e66:	f7fe f97b 	bl	8000160 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4933      	ldr	r1, [pc, #204]	; (8001f3c <sim_manager+0x184>)
 8001e70:	4830      	ldr	r0, [pc, #192]	; (8001f34 <sim_manager+0x17c>)
 8001e72:	f003 fa23 	bl	80052bc <memcpy>
    		    	_clear;
 8001e76:	f7fe fd32 	bl	80008de <lcd_clear>
    		    	lcd_string(1, 1, "saved...");
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <sim_manager+0x188>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7fe fd73 	bl	800096a <lcd_string>
    		    	HAL_Delay(1000);
 8001e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e88:	f000 fc40 	bl	800270c <HAL_Delay>
					break;
 8001e8c:	bf00      	nop
    		      tam[d]=kp;
    		      lcd_chr(2,d,kp);
    		      d++;
    		    }
    		  }
    	    	lcd_string(1, 1, "1-PHONE 3-EXIT");
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <sim_manager+0x16c>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7fe fd69 	bl	800096a <lcd_string>
    	        lcd_string(2, 1, "2-CHANGE");
 8001e98:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <sim_manager+0x18c>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7fe fd64 	bl	800096a <lcd_string>
 8001ea2:	e78e      	b.n	8001dc2 <sim_manager+0xa>
    		    if(kp==backspace && tam[d-1]!=0)
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <sim_manager+0x174>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b41      	cmp	r3, #65	; 0x41
 8001eaa:	d116      	bne.n	8001eda <sim_manager+0x122>
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <sim_manager+0x184>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d010      	beq.n	8001eda <sim_manager+0x122>
    		      if(d>0) d--;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <sim_manager+0x10c>
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
    		      tam[d]=0;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <sim_manager+0x184>)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	54d1      	strb	r1, [r2, r3]
    		      lcd_chr(2,d,' ');
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7fe fd5f 	bl	8000996 <lcd_char>
 8001ed8:	e01e      	b.n	8001f18 <sim_manager+0x160>
    		    else if(kp!=backspace && kp!=0 && kp!='C' && kp!='D')
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <sim_manager+0x174>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b41      	cmp	r3, #65	; 0x41
 8001ee0:	d0a3      	beq.n	8001e2a <sim_manager+0x72>
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <sim_manager+0x174>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d09f      	beq.n	8001e2a <sim_manager+0x72>
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <sim_manager+0x174>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b43      	cmp	r3, #67	; 0x43
 8001ef0:	d09b      	beq.n	8001e2a <sim_manager+0x72>
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <sim_manager+0x174>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b44      	cmp	r3, #68	; 0x44
 8001ef8:	d097      	beq.n	8001e2a <sim_manager+0x72>
    		      tam[d]=kp;
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <sim_manager+0x174>)
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <sim_manager+0x184>)
 8001f02:	54d1      	strb	r1, [r2, r3]
    		      lcd_chr(2,d,kp);
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <sim_manager+0x174>)
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fd42 	bl	8000996 <lcd_char>
    		      d++;
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	3301      	adds	r3, #1
 8001f16:	71fb      	strb	r3, [r7, #7]
    		    if(d<16) set_key();//doc ma phim bam
 8001f18:	e787      	b.n	8001e2a <sim_manager+0x72>
    	if(kp=='3') break;
 8001f1a:	bf00      	nop
    	}//if(kp=='2')


    }//while(1)
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	08005f70 	.word	0x08005f70
 8001f28:	08005f80 	.word	0x08005f80
 8001f2c:	200002c5 	.word	0x200002c5
 8001f30:	08005f90 	.word	0x08005f90
 8001f34:	200002a0 	.word	0x200002a0
 8001f38:	08005fa4 	.word	0x08005fa4
 8001f3c:	200002cc 	.word	0x200002cc
 8001f40:	08005fb0 	.word	0x08005fb0
 8001f44:	08005fbc 	.word	0x08005fbc

08001f48 <char_to_hex>:
  return number;
}

// char number to string hex (FF) (Only big letters!)
void char_to_hex(uint8_t data)
{
 8001f48:	b490      	push	{r4, r7}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  uint8_t digits[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <char_to_hex+0x60>)
 8001f54:	f107 0408 	add.w	r4, r7, #8
 8001f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (data < 16)
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <char_to_hex+0x32>
  {
    retstr[0] = '0';
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <char_to_hex+0x64>)
 8001f66:	2230      	movs	r2, #48	; 0x30
 8001f68:	701a      	strb	r2, [r3, #0]
    retstr[1] = digits[data];
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	3318      	adds	r3, #24
 8001f6e:	443b      	add	r3, r7
 8001f70:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <char_to_hex+0x64>)
 8001f76:	705a      	strb	r2, [r3, #1]
  } else {
    retstr[0] = digits[(data & 0xF0)>>4];
    retstr[1] = digits[(data & 0x0F)];
  }
}
 8001f78:	e011      	b.n	8001f9e <char_to_hex+0x56>
    retstr[0] = digits[(data & 0xF0)>>4];
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3318      	adds	r3, #24
 8001f82:	443b      	add	r3, r7
 8001f84:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <char_to_hex+0x64>)
 8001f8a:	701a      	strb	r2, [r3, #0]
    retstr[1] = digits[(data & 0x0F)];
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3318      	adds	r3, #24
 8001f94:	443b      	add	r3, r7
 8001f96:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <char_to_hex+0x64>)
 8001f9c:	705a      	strb	r2, [r3, #1]
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc90      	pop	{r4, r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	08005fc8 	.word	0x08005fc8
 8001fac:	200002f0 	.word	0x200002f0

08001fb0 <read_rfid>:

void read_rfid()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

	if (!MFRC522_Request(PICC_REQIDL, str))
 8001fb6:	497b      	ldr	r1, [pc, #492]	; (80021a4 <read_rfid+0x1f4>)
 8001fb8:	2026      	movs	r0, #38	; 0x26
 8001fba:	f7fe ff15 	bl	8000de8 <MFRC522_Request>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 80ca 	bne.w	800215a <read_rfid+0x1aa>
	{
	  if (!MFRC522_Anticoll(str))
 8001fc6:	4877      	ldr	r0, [pc, #476]	; (80021a4 <read_rfid+0x1f4>)
 8001fc8:	f7ff f802 	bl	8000fd0 <MFRC522_Anticoll>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80c3 	bne.w	800215a <read_rfid+0x1aa>
	  {
	    j = 0;
 8001fd4:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <read_rfid+0x1f8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
	    q = 0;
 8001fda:	4b74      	ldr	r3, [pc, #464]	; (80021ac <read_rfid+0x1fc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
	    b = 9;
 8001fe0:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <read_rfid+0x200>)
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	701a      	strb	r2, [r3, #0]
	    en = 1;
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <read_rfid+0x204>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]

	    for (i=0; i<4; i++) if (lastID[i] != str[i]) j = 1;               // Repeat test
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <read_rfid+0x208>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e014      	b.n	800201e <read_rfid+0x6e>
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <read_rfid+0x208>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b70      	ldr	r3, [pc, #448]	; (80021bc <read_rfid+0x20c>)
 8001ffc:	5c9a      	ldrb	r2, [r3, r2]
 8001ffe:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <read_rfid+0x208>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <read_rfid+0x1f4>)
 8002006:	5c5b      	ldrb	r3, [r3, r1]
 8002008:	429a      	cmp	r2, r3
 800200a:	d002      	beq.n	8002012 <read_rfid+0x62>
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <read_rfid+0x1f8>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <read_rfid+0x208>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <read_rfid+0x208>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <read_rfid+0x208>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d9e6      	bls.n	8001ff4 <read_rfid+0x44>
	    //if (j && en)
	    {
	      q = 0;
 8002026:	4b61      	ldr	r3, [pc, #388]	; (80021ac <read_rfid+0x1fc>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	      en = 0;
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <read_rfid+0x204>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
	      for (i=0; i<4; i++) lastID[i] = str[i];
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <read_rfid+0x208>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e00f      	b.n	800205a <read_rfid+0xaa>
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <read_rfid+0x208>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <read_rfid+0x208>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <read_rfid+0x1f4>)
 8002048:	5c59      	ldrb	r1, [r3, r1]
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <read_rfid+0x20c>)
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <read_rfid+0x208>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <read_rfid+0x208>)
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <read_rfid+0x208>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d9eb      	bls.n	800203a <read_rfid+0x8a>
	      for (i=0; i<4; i++)
 8002062:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <read_rfid+0x208>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e027      	b.n	80020ba <read_rfid+0x10a>
	      {
	        char_to_hex(str[i]);
 800206a:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <read_rfid+0x208>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <read_rfid+0x1f4>)
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff67 	bl	8001f48 <char_to_hex>
	        txBuffer[b] = retstr[0];
 800207a:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <read_rfid+0x200>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <read_rfid+0x210>)
 8002082:	7819      	ldrb	r1, [r3, #0]
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <read_rfid+0x214>)
 8002086:	5499      	strb	r1, [r3, r2]
	        b++;
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <read_rfid+0x200>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <read_rfid+0x200>)
 8002092:	701a      	strb	r2, [r3, #0]
	        txBuffer[b] = retstr[1];
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <read_rfid+0x200>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <read_rfid+0x210>)
 800209c:	7859      	ldrb	r1, [r3, #1]
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <read_rfid+0x214>)
 80020a0:	5499      	strb	r1, [r3, r2]
	        b++;
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <read_rfid+0x200>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <read_rfid+0x200>)
 80020ac:	701a      	strb	r2, [r3, #0]
	      for (i=0; i<4; i++)
 80020ae:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <read_rfid+0x208>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <read_rfid+0x208>)
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <read_rfid+0x208>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d9d3      	bls.n	800206a <read_rfid+0xba>
	      }

	      //gửi mã thẻ RFID
	      char *temp;
	      for(int i=14;i<18;i++)
 80020c2:	230e      	movs	r3, #14
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	e021      	b.n	800210c <read_rfid+0x15c>
	      {
	        char txtTemp[1]="";
 80020c8:	2300      	movs	r3, #0
 80020ca:	703b      	strb	r3, [r7, #0]
	        if(txBuffer[i]!=0)
 80020cc:	4a3d      	ldr	r2, [pc, #244]	; (80021c4 <read_rfid+0x214>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <read_rfid+0x156>
	        {
	          //sprintf(txtTemp,"%x",txBuffer[i]);
	          sprintf(txtTemp,"%x",txBuffer[i]);
 80020d8:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <read_rfid+0x214>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	463b      	mov	r3, r7
 80020e4:	4938      	ldr	r1, [pc, #224]	; (80021c8 <read_rfid+0x218>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 f8fe 	bl	80052e8 <siprintf>

	          if(strlen(rfid_code)==0) memcpy(rfid_code,txtTemp,1);
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <read_rfid+0x21c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <read_rfid+0x14c>
 80020f4:	783a      	ldrb	r2, [r7, #0]
 80020f6:	4b35      	ldr	r3, [pc, #212]	; (80021cc <read_rfid+0x21c>)
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e004      	b.n	8002106 <read_rfid+0x156>
	          else strcat(rfid_code,txtTemp);
 80020fc:	463b      	mov	r3, r7
 80020fe:	4619      	mov	r1, r3
 8002100:	4832      	ldr	r0, [pc, #200]	; (80021cc <read_rfid+0x21c>)
 8002102:	f003 f911 	bl	8005328 <strcat>
	      for(int i=14;i<18;i++)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3301      	adds	r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b11      	cmp	r3, #17
 8002110:	ddda      	ble.n	80020c8 <read_rfid+0x118>

	      //sim_print(rfid_code);
	      //sim_print("\n\r");

	      //đợi 1s
	      HAL_Delay(300);
 8002112:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002116:	f000 faf9 	bl	800270c <HAL_Delay>
	      ok = 1;
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <read_rfid+0x220>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
	      for (i=0; i<8; i++) if (txBuffer[9+i] != memID[i]) ok = 0;
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <read_rfid+0x208>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e014      	b.n	8002152 <read_rfid+0x1a2>
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <read_rfid+0x208>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3309      	adds	r3, #9
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <read_rfid+0x214>)
 8002130:	5cd2      	ldrb	r2, [r2, r3]
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <read_rfid+0x208>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <read_rfid+0x224>)
 800213a:	5c5b      	ldrb	r3, [r3, r1]
 800213c:	429a      	cmp	r2, r3
 800213e:	d002      	beq.n	8002146 <read_rfid+0x196>
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <read_rfid+0x220>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <read_rfid+0x208>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <read_rfid+0x208>)
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <read_rfid+0x208>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b07      	cmp	r3, #7
 8002158:	d9e6      	bls.n	8002128 <read_rfid+0x178>
	    }
	  }
	}//


	q++;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <read_rfid+0x1fc>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <read_rfid+0x1fc>)
 8002164:	701a      	strb	r2, [r3, #0]
	if (!q)
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <read_rfid+0x1fc>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <read_rfid+0x1ec>
	{
	  en = 1;               // Delay against scan kode
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <read_rfid+0x204>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
	  for (i=0; i<4; i++) lastID[i] = 0;  // Delay reading the same card 3s
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <read_rfid+0x208>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e00b      	b.n	8002194 <read_rfid+0x1e4>
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <read_rfid+0x208>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <read_rfid+0x20c>)
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <read_rfid+0x208>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <read_rfid+0x208>)
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <read_rfid+0x208>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d9ef      	bls.n	800217c <read_rfid+0x1cc>
	}

}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000300 	.word	0x20000300
 80021a8:	200002e1 	.word	0x200002e1
 80021ac:	200002e3 	.word	0x200002e3
 80021b0:	200002e2 	.word	0x200002e2
 80021b4:	200002e4 	.word	0x200002e4
 80021b8:	200002e0 	.word	0x200002e0
 80021bc:	200002fc 	.word	0x200002fc
 80021c0:	200002f0 	.word	0x200002f0
 80021c4:	200002e8 	.word	0x200002e8
 80021c8:	08005fd8 	.word	0x08005fd8
 80021cc:	20000310 	.word	0x20000310
 80021d0:	200002e5 	.word	0x200002e5
 80021d4:	2000004c 	.word	0x2000004c

080021d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_SPI1_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <MX_SPI1_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <MX_SPI1_Init+0x64>)
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_SPI1_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_SPI1_Init+0x64>)
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_SPI1_Init+0x64>)
 800220c:	2238      	movs	r2, #56	; 0x38
 800220e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_SPI1_Init+0x64>)
 8002224:	220a      	movs	r2, #10
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_SPI1_Init+0x64>)
 800222a:	f001 fecb 	bl	8003fc4 <HAL_SPI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002234:	f7fe fd11 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000324 	.word	0x20000324
 8002240:	40013000 	.word	0x40013000

08002244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_SPI_MspInit+0x88>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d12f      	bne.n	80022c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 800226a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002294:	23a0      	movs	r3, #160	; 0xa0
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	480b      	ldr	r0, [pc, #44]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 80022a8:	f000 fc14 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 80022c0:	f000 fc08 	bl	8002ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013000 	.word	0x40013000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010800 	.word	0x40010800

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_MspInit+0x5c>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_MspInit+0x5c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_MspInit+0x5c>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_MspInit+0x5c>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_MspInit+0x5c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_MspInit+0x5c>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_MspInit+0x60>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_MspInit+0x60>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002382:	f000 f9a7 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USART1_IRQHandler+0x10>)
 8002392:	f002 f9e9 	bl	8004768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000380 	.word	0x20000380

080023a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <USART2_IRQHandler+0x10>)
 80023a6:	f002 f9df 	bl	8004768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200003c8 	.word	0x200003c8

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f002 ff40 	bl	8005268 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20005000 	.word	0x20005000
 8002414:	00000400 	.word	0x00000400
 8002418:	2000037c 	.word	0x2000037c
 800241c:	20000428 	.word	0x20000428

08002420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART1_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART1_UART_Init+0x4c>)
 8002464:	f002 f888 	bl	8004578 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7fe fbf4 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000380 	.word	0x20000380
 800247c:	40013800 	.word	0x40013800

08002480 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <MX_USART2_UART_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 800248c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b8:	f002 f85e 	bl	8004578 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024c2:	f7fe fbca 	bl	8000c5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200003c8 	.word	0x200003c8
 80024d0:	40004400 	.word	0x40004400

080024d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_UART_MspInit+0x118>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d13a      	bne.n	800256a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f4:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a3d      	ldr	r2, [pc, #244]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 80024fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6193      	str	r3, [r2, #24]
 8002518:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	4619      	mov	r1, r3
 8002538:	482e      	ldr	r0, [pc, #184]	; (80025f4 <HAL_UART_MspInit+0x120>)
 800253a:	f000 facb 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	4619      	mov	r1, r3
 8002552:	4828      	ldr	r0, [pc, #160]	; (80025f4 <HAL_UART_MspInit+0x120>)
 8002554:	f000 fabe 	bl	8002ad4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	2025      	movs	r0, #37	; 0x25
 800255e:	f000 f9d0 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002562:	2025      	movs	r0, #37	; 0x25
 8002564:	f000 f9e9 	bl	800293a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002568:	e03c      	b.n	80025e4 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_UART_MspInit+0x124>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d137      	bne.n	80025e4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	61d3      	str	r3, [r2, #28]
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0x11c>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025a4:	2304      	movs	r3, #4
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	4619      	mov	r1, r3
 80025b6:	480f      	ldr	r0, [pc, #60]	; (80025f4 <HAL_UART_MspInit+0x120>)
 80025b8:	f000 fa8c 	bl	8002ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025bc:	2308      	movs	r3, #8
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	f107 0318 	add.w	r3, r7, #24
 80025cc:	4619      	mov	r1, r3
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_UART_MspInit+0x120>)
 80025d0:	f000 fa80 	bl	8002ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2026      	movs	r0, #38	; 0x26
 80025da:	f000 f992 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025de:	2026      	movs	r0, #38	; 0x26
 80025e0:	f000 f9ab 	bl	800293a <HAL_NVIC_EnableIRQ>
}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	; 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40004400 	.word	0x40004400

080025fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025fc:	f7ff ff10 	bl	8002420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002604:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002618:	4c09      	ldr	r4, [pc, #36]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002626:	f002 fe25 	bl	8005274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262a:	f7fe fa49 	bl	8000ac0 <main>
  bx lr
 800262e:	4770      	bx	lr
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002638:	08006044 	.word	0x08006044
  ldr r2, =_sbss
 800263c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002640:	20000424 	.word	0x20000424

08002644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_2_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x28>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x28>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f947 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fe38 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f95f 	bl	8002956 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f927 	bl	8002902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000054 	.word	0x20000054
 80026cc:	2000005c 	.word	0x2000005c
 80026d0:	20000058 	.word	0x20000058

080026d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_IncTick+0x1c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_IncTick+0x20>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a03      	ldr	r2, [pc, #12]	; (80026f4 <HAL_IncTick+0x20>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	2000005c 	.word	0x2000005c
 80026f4:	20000410 	.word	0x20000410

080026f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b02      	ldr	r3, [pc, #8]	; (8002708 <HAL_GetTick+0x10>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000410 	.word	0x20000410

0800270c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff fff0 	bl	80026f8 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d005      	beq.n	8002732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_Delay+0x44>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002732:	bf00      	nop
 8002734:	f7ff ffe0 	bl	80026f8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f7      	bhi.n	8002734 <HAL_Delay+0x28>
  {
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000005c 	.word	0x2000005c

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0b      	blt.n	80027e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4906      	ldr	r1, [pc, #24]	; (80027ec <__NVIC_EnableIRQ+0x34>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f7ff ff90 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff2d 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff42 	bl	800279c <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ff90 	bl	8002844 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff5f 	bl	80027f0 <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff35 	bl	80027b8 <__NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffa2 	bl	80028a8 <SysTick_Config>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d008      	beq.n	8002998 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e020      	b.n	80029da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 020e 	bic.w	r2, r2, #14
 80029a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d005      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2204      	movs	r2, #4
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	e051      	b.n	8002aac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020e 	bic.w	r2, r2, #14
 8002a16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_DMA_Abort_IT+0xd4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d029      	beq.n	8002a86 <HAL_DMA_Abort_IT+0xa2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_DMA_Abort_IT+0xd8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x9e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_DMA_Abort_IT+0xdc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x98>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_DMA_Abort_IT+0xe0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d012      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x92>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_DMA_Abort_IT+0xe4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00a      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x8c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_DMA_Abort_IT+0xe8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d102      	bne.n	8002a6a <HAL_DMA_Abort_IT+0x86>
 8002a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a68:	e00e      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6e:	e00b      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a74:	e008      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7a:	e005      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a80:	e002      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a82:	2310      	movs	r3, #16
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Abort_IT+0xa4>
 8002a86:	2301      	movs	r3, #1
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_DMA_Abort_IT+0xec>)
 8002a8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
    } 
  }
  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40020008 	.word	0x40020008
 8002abc:	4002001c 	.word	0x4002001c
 8002ac0:	40020030 	.word	0x40020030
 8002ac4:	40020044 	.word	0x40020044
 8002ac8:	40020058 	.word	0x40020058
 8002acc:	4002006c 	.word	0x4002006c
 8002ad0:	40020000 	.word	0x40020000

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b08b      	sub	sp, #44	; 0x2c
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	e169      	b.n	8002dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f040 8158 	bne.w	8002db6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a9a      	ldr	r2, [pc, #616]	; (8002d74 <HAL_GPIO_Init+0x2a0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d05e      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
 8002b10:	4a98      	ldr	r2, [pc, #608]	; (8002d74 <HAL_GPIO_Init+0x2a0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d875      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b16:	4a98      	ldr	r2, [pc, #608]	; (8002d78 <HAL_GPIO_Init+0x2a4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d058      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
 8002b1c:	4a96      	ldr	r2, [pc, #600]	; (8002d78 <HAL_GPIO_Init+0x2a4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d86f      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b22:	4a96      	ldr	r2, [pc, #600]	; (8002d7c <HAL_GPIO_Init+0x2a8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d052      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
 8002b28:	4a94      	ldr	r2, [pc, #592]	; (8002d7c <HAL_GPIO_Init+0x2a8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d869      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b2e:	4a94      	ldr	r2, [pc, #592]	; (8002d80 <HAL_GPIO_Init+0x2ac>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d04c      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
 8002b34:	4a92      	ldr	r2, [pc, #584]	; (8002d80 <HAL_GPIO_Init+0x2ac>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d863      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b3a:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_GPIO_Init+0x2b0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d046      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
 8002b40:	4a90      	ldr	r2, [pc, #576]	; (8002d84 <HAL_GPIO_Init+0x2b0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d85d      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b46:	2b12      	cmp	r3, #18
 8002b48:	d82a      	bhi.n	8002ba0 <HAL_GPIO_Init+0xcc>
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d859      	bhi.n	8002c02 <HAL_GPIO_Init+0x12e>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_GPIO_Init+0x80>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002bcf 	.word	0x08002bcf
 8002b58:	08002ba9 	.word	0x08002ba9
 8002b5c:	08002bbb 	.word	0x08002bbb
 8002b60:	08002bfd 	.word	0x08002bfd
 8002b64:	08002c03 	.word	0x08002c03
 8002b68:	08002c03 	.word	0x08002c03
 8002b6c:	08002c03 	.word	0x08002c03
 8002b70:	08002c03 	.word	0x08002c03
 8002b74:	08002c03 	.word	0x08002c03
 8002b78:	08002c03 	.word	0x08002c03
 8002b7c:	08002c03 	.word	0x08002c03
 8002b80:	08002c03 	.word	0x08002c03
 8002b84:	08002c03 	.word	0x08002c03
 8002b88:	08002c03 	.word	0x08002c03
 8002b8c:	08002c03 	.word	0x08002c03
 8002b90:	08002c03 	.word	0x08002c03
 8002b94:	08002c03 	.word	0x08002c03
 8002b98:	08002bb1 	.word	0x08002bb1
 8002b9c:	08002bc5 	.word	0x08002bc5
 8002ba0:	4a79      	ldr	r2, [pc, #484]	; (8002d88 <HAL_GPIO_Init+0x2b4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba6:	e02c      	b.n	8002c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	623b      	str	r3, [r7, #32]
          break;
 8002bae:	e029      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	e024      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	623b      	str	r3, [r7, #32]
          break;
 8002bc2:	e01f      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	623b      	str	r3, [r7, #32]
          break;
 8002bcc:	e01a      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	623b      	str	r3, [r7, #32]
          break;
 8002bda:	e013      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be4:	2308      	movs	r3, #8
 8002be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	611a      	str	r2, [r3, #16]
          break;
 8002bee:	e009      	b.n	8002c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	615a      	str	r2, [r3, #20]
          break;
 8002bfa:	e003      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x130>
          break;
 8002c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d801      	bhi.n	8002c0e <HAL_GPIO_Init+0x13a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	e001      	b.n	8002c12 <HAL_GPIO_Init+0x13e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d802      	bhi.n	8002c20 <HAL_GPIO_Init+0x14c>
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	e002      	b.n	8002c26 <HAL_GPIO_Init+0x152>
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	3b08      	subs	r3, #8
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	210f      	movs	r1, #15
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	6a39      	ldr	r1, [r7, #32]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80b1 	beq.w	8002db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c54:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_GPIO_Init+0x2b8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_GPIO_Init+0x2b8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_GPIO_Init+0x2b8>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c6c:	4a48      	ldr	r2, [pc, #288]	; (8002d90 <HAL_GPIO_Init+0x2bc>)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <HAL_GPIO_Init+0x2c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_GPIO_Init+0x1ec>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3f      	ldr	r2, [pc, #252]	; (8002d98 <HAL_GPIO_Init+0x2c4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00d      	beq.n	8002cbc <HAL_GPIO_Init+0x1e8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3e      	ldr	r2, [pc, #248]	; (8002d9c <HAL_GPIO_Init+0x2c8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <HAL_GPIO_Init+0x1e4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <HAL_GPIO_Init+0x2cc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_GPIO_Init+0x1e0>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e006      	b.n	8002cc2 <HAL_GPIO_Init+0x1ee>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e004      	b.n	8002cc2 <HAL_GPIO_Init+0x1ee>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x1ee>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_GPIO_Init+0x1ee>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc4:	f002 0203 	and.w	r2, r2, #3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4093      	lsls	r3, r2
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd2:	492f      	ldr	r1, [pc, #188]	; (8002d90 <HAL_GPIO_Init+0x2bc>)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	492c      	ldr	r1, [pc, #176]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4928      	ldr	r1, [pc, #160]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d14:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60cb      	str	r3, [r1, #12]
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	491e      	ldr	r1, [pc, #120]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4918      	ldr	r1, [pc, #96]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4914      	ldr	r1, [pc, #80]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d021      	beq.n	8002da8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e021      	b.n	8002db6 <HAL_GPIO_Init+0x2e2>
 8002d72:	bf00      	nop
 8002d74:	10320000 	.word	0x10320000
 8002d78:	10310000 	.word	0x10310000
 8002d7c:	10220000 	.word	0x10220000
 8002d80:	10210000 	.word	0x10210000
 8002d84:	10120000 	.word	0x10120000
 8002d88:	10110000 	.word	0x10110000
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40010800 	.word	0x40010800
 8002d98:	40010c00 	.word	0x40010c00
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_GPIO_Init+0x304>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <HAL_GPIO_Init+0x304>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f ae8e 	bne.w	8002ae8 <HAL_GPIO_Init+0x14>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	372c      	adds	r7, #44	; 0x2c
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	40010400 	.word	0x40010400

08002ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e001      	b.n	8002dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
 8002e16:	4613      	mov	r3, r2
 8002e18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e1a:	787b      	ldrb	r3, [r7, #1]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	041a      	lsls	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fa18 	bl	80002c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f001 f832 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	; (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	; (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	460b      	mov	r3, r1
 8003102:	817b      	strh	r3, [r7, #10]
 8003104:	4613      	mov	r3, r2
 8003106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff faf6 	bl	80026f8 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 80e0 	bne.w	80032dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2319      	movs	r3, #25
 8003122:	2201      	movs	r2, #1
 8003124:	4970      	ldr	r1, [pc, #448]	; (80032e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f964 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	e0d3      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x50>
 8003140:	2302      	movs	r3, #2
 8003142:	e0cc      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d007      	beq.n	800316a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2210      	movs	r2, #16
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	893a      	ldrh	r2, [r7, #8]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_I2C_Master_Transmit+0x1f8>)
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f89c 	bl	80032f0 <I2C_MasterRequestWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08d      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031d8:	e066      	b.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa22 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d107      	bne.n	8003202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06b      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_I2C_Master_Transmit+0x188>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6a39      	ldr	r1, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa19 	bl	80036b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e01a      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d194      	bne.n	80031da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d006      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d003      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003318:	d108      	bne.n	800332c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e00b      	b.n	8003344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b12      	cmp	r3, #18
 8003332:	d107      	bne.n	8003344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f84f 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	d103      	bne.n	8003374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e035      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e01b      	b.n	80033cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	11db      	asrs	r3, r3, #7
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f063 030f 	orn	r3, r3, #15
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <I2C_MasterRequestWrite+0xfc>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f898 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e010      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <I2C_MasterRequestWrite+0x100>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f888 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010008 	.word	0x00010008
 80033f0:	00010002 	.word	0x00010002

080033f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	e048      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d044      	beq.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7ff f973 	bl	80026f8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d139      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10d      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x56>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	e00c      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x70>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	429a      	cmp	r2, r3
 8003468:	d116      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e023      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10d      	bne.n	80034be <I2C_WaitOnFlagUntilTimeout+0xca>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	e00c      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d093      	beq.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f6:	e071      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d123      	bne.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e067      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d041      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7ff f8ce 	bl	80026f8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d136      	bne.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10c      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e00b      	b.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e021      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10c      	bne.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e00b      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f af6d 	bne.w	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f886 	bl	8003748 <I2C_IsAcknowledgeFailed>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d028      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7ff f853 	bl	80026f8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11d      	bne.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d016      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d1c3      	bne.n	8003636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f83e 	bl	8003748 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d028      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7ff f80b 	bl	80026f8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d1c3      	bne.n	80036c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d11b      	bne.n	8003798 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003768:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e272      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8087 	beq.w	80038d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d0:	4b8f      	ldr	r3, [pc, #572]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d112      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d10b      	bne.n	8003802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ea:	4b89      	ldr	r3, [pc, #548]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d06c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x12c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d168      	bne.n	80038d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e24c      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x76>
 800380c:	4b80      	ldr	r3, [pc, #512]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7f      	ldr	r2, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e02e      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x98>
 8003822:	4b7b      	ldr	r3, [pc, #492]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7a      	ldr	r2, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xbc>
 8003846:	4b72      	ldr	r3, [pc, #456]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a71      	ldr	r2, [pc, #452]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xd4>
 8003860:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe ff3a 	bl	80026f8 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe ff36 	bl	80026f8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e200      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xe4>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe ff26 	bl	80026f8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe ff22 	bl	80026f8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1ec      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x10c>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038de:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
 80038f6:	4b46      	ldr	r3, [pc, #280]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c0      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4939      	ldr	r1, [pc, #228]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe fedb 	bl	80026f8 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fed7 	bl	80026f8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a1      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4927      	ldr	r1, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_RCC_OscConfig+0x270>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe feba 	bl	80026f8 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fe feb6 	bl	80026f8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e180      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03a      	beq.n	8003a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d019      	beq.n	80039ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fe9a 	bl	80026f8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fe96 	bl	80026f8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e160      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f000 face 	bl	8003f88 <RCC_Delay>
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_OscConfig+0x274>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f4:	f7fe fe80 	bl	80026f8 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fa:	e00f      	b.n	8003a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe fe7c 	bl	80026f8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d908      	bls.n	8003a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e146      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	42420000 	.word	0x42420000
 8003a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	4b92      	ldr	r3, [pc, #584]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e9      	bne.n	80039fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4a87      	ldr	r2, [pc, #540]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	61d3      	str	r3, [r2, #28]
 8003a52:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	; (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fe3d 	bl	80026f8 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fe39 	bl	80026f8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e103      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x4c8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x312>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6213      	str	r3, [r2, #32]
 8003ab4:	e02d      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x334>
 8003abe:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a69      	ldr	r2, [pc, #420]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6213      	str	r3, [r2, #32]
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d10c      	bne.n	8003afa <HAL_RCC_OscConfig+0x356>
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a60      	ldr	r2, [pc, #384]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x36e>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6213      	str	r3, [r2, #32]
 8003b06:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fded 	bl	80026f8 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe fde9 	bl	80026f8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0b1      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ee      	beq.n	8003b22 <HAL_RCC_OscConfig+0x37e>
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fe fdd7 	bl	80026f8 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fdd3 	bl	80026f8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e09b      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8087 	beq.w	8003c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d061      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d146      	bne.n	8003c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fda7 	bl	80026f8 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe fda3 	bl	80026f8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e06d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d108      	bne.n	8003be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4921      	ldr	r1, [pc, #132]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be8:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a19      	ldr	r1, [r3, #32]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	491b      	ldr	r1, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe fd77 	bl	80026f8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe fd73 	bl	80026f8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e03d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x46a>
 8003c2c:	e035      	b.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fd60 	bl	80026f8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fd5c 	bl	80026f8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e026      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x498>
 8003c5a:	e01e      	b.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e019      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_OscConfig+0x500>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	4965      	ldr	r1, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4936      	ldr	r1, [pc, #216]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe fcae 	bl	80026f8 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fe fcaa 	bl	80026f8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e053      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d210      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1cc>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1d0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fc0c 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08005fdc 	.word	0x08005fdc
 8003e74:	20000054 	.word	0x20000054
 8003e78:	20000058 	.word	0x20000058

08003e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x30>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eaa:	e027      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eae:	613b      	str	r3, [r7, #16]
      break;
 8003eb0:	e027      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0c5b      	lsrs	r3, r3, #17
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	4a11      	ldr	r2, [pc, #68]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ede:	fb03 f202 	mul.w	r2, r3, r2
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e004      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	613b      	str	r3, [r7, #16]
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	693b      	ldr	r3, [r7, #16]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	007a1200 	.word	0x007a1200
 8003f18:	08005ff4 	.word	0x08005ff4
 8003f1c:	08006004 	.word	0x08006004
 8003f20:	003d0900 	.word	0x003d0900

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	20000054 	.word	0x20000054

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f3c:	f7ff fff2 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08005fec 	.word	0x08005fec

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f64:	f7ff ffde 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	08005fec 	.word	0x08005fec

08003f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <RCC_Delay+0x34>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <RCC_Delay+0x38>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0a5b      	lsrs	r3, r3, #9
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fa4:	bf00      	nop
  }
  while (Delay --);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1e5a      	subs	r2, r3, #1
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f9      	bne.n	8003fa4 <RCC_Delay+0x1c>
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	20000054 	.word	0x20000054
 8003fc0:	10624dd3 	.word	0x10624dd3

08003fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e076      	b.n	80040c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe6:	d009      	beq.n	8003ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	e005      	b.n	8003ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe f914 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0c1a      	lsrs	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f002 0204 	and.w	r2, r2, #4
 80040a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08c      	sub	sp, #48	; 0x30
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040da:	2301      	movs	r3, #1
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x26>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e198      	b.n	8004424 <HAL_SPI_TransmitReceive+0x358>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fa:	f7fe fafd 	bl	80026f8 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004118:	2b01      	cmp	r3, #1
 800411a:	d00f      	beq.n	800413c <HAL_SPI_TransmitReceive+0x70>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004122:	d107      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x68>
 800412c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800413a:	e16d      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_SPI_TransmitReceive+0x82>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_SPI_TransmitReceive+0x82>
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004154:	e160      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2205      	movs	r2, #5
 8004166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d007      	beq.n	80041be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c6:	d17c      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x10a>
 80041d0:	8b7b      	ldrh	r3, [r7, #26]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d16a      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fa:	e057      	b.n	80042ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d11b      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x176>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x176>
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d113      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d119      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x1b8>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	b292      	uxth	r2, r2
 8004266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004280:	2301      	movs	r3, #1
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004284:	f7fe fa38 	bl	80026f8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004290:	429a      	cmp	r2, r3
 8004292:	d80b      	bhi.n	80042ac <HAL_SPI_TransmitReceive+0x1e0>
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d007      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042aa:	e0b5      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1a2      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x130>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d19d      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x130>
 80042c0:	e080      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x204>
 80042ca:	8b7b      	ldrh	r3, [r7, #26]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d16f      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f6:	e05b      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d11c      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x274>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <HAL_SPI_TransmitReceive+0x274>
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d114      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d119      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x2b6>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d014      	beq.n	8004382 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800437e:	2301      	movs	r3, #1
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004382:	f7fe f9b9 	bl	80026f8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438e:	429a      	cmp	r2, r3
 8004390:	d803      	bhi.n	800439a <HAL_SPI_TransmitReceive+0x2ce>
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d102      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x2d4>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80043ae:	e033      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d19e      	bne.n	80042f8 <HAL_SPI_TransmitReceive+0x22c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d199      	bne.n	80042f8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f8b7 	bl	800453c <SPI_EndRxTxTransaction>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043e0:	e01a      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440e:	e003      	b.n	8004418 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004420:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004424:	4618      	mov	r0, r3
 8004426:	3730      	adds	r7, #48	; 0x30
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800443c:	f7fe f95c 	bl	80026f8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4413      	add	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800444c:	f7fe f954 	bl	80026f8 <HAL_GetTick>
 8004450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004452:	4b39      	ldr	r3, [pc, #228]	; (8004538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	0d1b      	lsrs	r3, r3, #20
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004462:	e054      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d050      	beq.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800446c:	f7fe f944 	bl	80026f8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	429a      	cmp	r2, r3
 800447a:	d902      	bls.n	8004482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13d      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449a:	d111      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	d004      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d107      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c8:	d10f      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e017      	b.n	800452e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3b01      	subs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d19b      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000054 	.word	0x20000054

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ff6a 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e000      	b.n	8004570 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e042      	b.n	8004610 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd ff98 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2224      	movs	r2, #36	; 0x24
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fdc5 	bl	800514c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695a      	ldr	r2, [r3, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	d16d      	bne.n	8004714 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Transmit+0x2c>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e066      	b.n	8004716 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2221      	movs	r2, #33	; 0x21
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004656:	f7fe f84f 	bl	80026f8 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004670:	d108      	bne.n	8004684 <HAL_UART_Transmit+0x6c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e003      	b.n	800468c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800468c:	e02a      	b.n	80046e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2200      	movs	r2, #0
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fb14 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e036      	b.n	8004716 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3302      	adds	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e007      	b.n	80046d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1cf      	bne.n	800468e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2140      	movs	r1, #64	; 0x40
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fae4 	bl	8004cc6 <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e006      	b.n	8004716 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	d112      	bne.n	800475e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Receive_IT+0x26>
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e00b      	b.n	8004760 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	461a      	mov	r2, r3
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fb24 	bl	8004da2 <UART_Start_Receive_IT>
 800475a:	4603      	mov	r3, r0
 800475c:	e000      	b.n	8004760 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b0ba      	sub	sp, #232	; 0xe8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_UART_IRQHandler+0x66>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fc01 	bl	8004fce <UART_Receive_IT>
      return;
 80047cc:	e25b      	b.n	8004c86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80de 	beq.w	8004994 <HAL_UART_IRQHandler+0x22c>
 80047d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80d1 	beq.w	8004994 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0xae>
 80047fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_UART_IRQHandler+0xd2>
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f043 0202 	orr.w	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_UART_IRQHandler+0xf6>
 8004846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d011      	beq.n	800488e <HAL_UART_IRQHandler+0x126>
 800486a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f043 0208 	orr.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 81f2 	beq.w	8004c7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_UART_IRQHandler+0x14e>
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fb8c 	bl	8004fce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d103      	bne.n	80048e2 <HAL_UART_IRQHandler+0x17a>
 80048da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04f      	beq.n	8004982 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa96 	bl	8004e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d041      	beq.n	800497a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800490c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800492e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800493a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1d9      	bne.n	80048f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d013      	beq.n	8004972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	4a7e      	ldr	r2, [pc, #504]	; (8004b48 <HAL_UART_IRQHandler+0x3e0>)
 8004950:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe f844 	bl	80029e4 <HAL_DMA_Abort_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800496c:	4610      	mov	r0, r2
 800496e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e00e      	b.n	8004990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f993 	bl	8004c9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e00a      	b.n	8004990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f98f 	bl	8004c9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e006      	b.n	8004990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f98b 	bl	8004c9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800498e:	e175      	b.n	8004c7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	bf00      	nop
    return;
 8004992:	e173      	b.n	8004c7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 814f 	bne.w	8004c3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8148 	beq.w	8004c3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8141 	beq.w	8004c3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80b6 	beq.w	8004b4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8145 	beq.w	8004c80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049fe:	429a      	cmp	r2, r3
 8004a00:	f080 813e 	bcs.w	8004c80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	f000 8088 	beq.w	8004b28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a44:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1d9      	bne.n	8004a18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e1      	bne.n	8004a64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ac4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ac6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e3      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af8:	f023 0310 	bic.w	r3, r3, #16
 8004afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e3      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd ff23 	bl	800296e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f8b6 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b44:	e09c      	b.n	8004c80 <HAL_UART_IRQHandler+0x518>
 8004b46:	bf00      	nop
 8004b48:	08004ed9 	.word	0x08004ed9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 808e 	beq.w	8004c84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8089 	beq.w	8004c84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b96:	647a      	str	r2, [r7, #68]	; 0x44
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e3      	bne.n	8004b72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bce:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e3      	bne.n	8004baa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c14:	61fa      	str	r2, [r7, #28]
 8004c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	617b      	str	r3, [r7, #20]
   return(result);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e3      	bne.n	8004bf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f83b 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c3a:	e023      	b.n	8004c84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_UART_IRQHandler+0x4f4>
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f953 	bl	8004f00 <UART_Transmit_IT>
    return;
 8004c5a:	e014      	b.n	8004c86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <HAL_UART_IRQHandler+0x51e>
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f992 	bl	8004f9e <UART_EndTransmit_IT>
    return;
 8004c7a:	e004      	b.n	8004c86 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c7c:	bf00      	nop
 8004c7e:	e002      	b.n	8004c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c84:	bf00      	nop
  }
}
 8004c86:	37e8      	adds	r7, #232	; 0xe8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b090      	sub	sp, #64	; 0x40
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd6:	e050      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d04c      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce6:	f7fd fd07 	bl	80026f8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d241      	bcs.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d16:	637a      	str	r2, [r7, #52]	; 0x34
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d4a:	623a      	str	r2, [r7, #32]
 8004d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d09f      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3740      	adds	r7, #64	; 0x40
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	4613      	mov	r3, r2
 8004dae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2222      	movs	r2, #34	; 0x22
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0220 	orr.w	r2, r2, #32
 8004e06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b095      	sub	sp, #84	; 0x54
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e3c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e5      	bne.n	8004e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d119      	bne.n	8004ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	61ba      	str	r2, [r7, #24]
 8004eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ece:	bf00      	nop
 8004ed0:	3754      	adds	r7, #84	; 0x54
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fed3 	bl	8004c9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	d13e      	bne.n	8004f92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1c:	d114      	bne.n	8004f48 <UART_Transmit_IT+0x48>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d110      	bne.n	8004f48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]
 8004f46:	e008      	b.n	8004f5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	1c59      	adds	r1, r3, #1
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6211      	str	r1, [r2, #32]
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4619      	mov	r1, r3
 8004f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e000      	b.n	8004f94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fe64 	bl	8004c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08c      	sub	sp, #48	; 0x30
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b22      	cmp	r3, #34	; 0x22
 8004fe0:	f040 80ae 	bne.w	8005140 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d117      	bne.n	800501e <UART_Receive_IT+0x50>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d113      	bne.n	800501e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500c:	b29a      	uxth	r2, r3
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
 800501c:	e026      	b.n	800506c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d007      	beq.n	8005042 <UART_Receive_IT+0x74>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <UART_Receive_IT+0x82>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e008      	b.n	8005062 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505c:	b2da      	uxtb	r2, r3
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4619      	mov	r1, r3
 800507a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800507c:	2b00      	cmp	r3, #0
 800507e:	d15d      	bne.n	800513c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0220 	bic.w	r2, r2, #32
 800508e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d135      	bne.n	8005132 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	613b      	str	r3, [r7, #16]
   return(result);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	623a      	str	r2, [r7, #32]
 80050ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69f9      	ldr	r1, [r7, #28]
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d10a      	bne.n	8005124 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fdc0 	bl	8004cb0 <HAL_UARTEx_RxEventCallback>
 8005130:	e002      	b.n	8005138 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb fc46 	bl	80009c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e002      	b.n	8005142 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3730      	adds	r7, #48	; 0x30
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005186:	f023 030c 	bic.w	r3, r3, #12
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	430b      	orrs	r3, r1
 8005192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <UART_SetConfig+0x114>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051b4:	f7fe fed4 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	e002      	b.n	80051c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fe febc 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 80051c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009a      	lsls	r2, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	4a22      	ldr	r2, [pc, #136]	; (8005264 <UART_SetConfig+0x118>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	0119      	lsls	r1, r3, #4
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009a      	lsls	r2, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <UART_SetConfig+0x118>)
 80051fa:	fba3 0302 	umull	r0, r3, r3, r2
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2064      	movs	r0, #100	; 0x64
 8005202:	fb00 f303 	mul.w	r3, r0, r3
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	3332      	adds	r3, #50	; 0x32
 800520c:	4a15      	ldr	r2, [pc, #84]	; (8005264 <UART_SetConfig+0x118>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005218:	4419      	add	r1, r3
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009a      	lsls	r2, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <UART_SetConfig+0x118>)
 8005232:	fba3 0302 	umull	r0, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	2064      	movs	r0, #100	; 0x64
 800523a:	fb00 f303 	mul.w	r3, r0, r3
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	3332      	adds	r3, #50	; 0x32
 8005244:	4a07      	ldr	r2, [pc, #28]	; (8005264 <UART_SetConfig+0x118>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	440a      	add	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40013800 	.word	0x40013800
 8005264:	51eb851f 	.word	0x51eb851f

08005268 <__errno>:
 8005268:	4b01      	ldr	r3, [pc, #4]	; (8005270 <__errno+0x8>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000060 	.word	0x20000060

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	2600      	movs	r6, #0
 8005278:	4d0c      	ldr	r5, [pc, #48]	; (80052ac <__libc_init_array+0x38>)
 800527a:	4c0d      	ldr	r4, [pc, #52]	; (80052b0 <__libc_init_array+0x3c>)
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	42a6      	cmp	r6, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	f000 fcfa 	bl	8005c7c <_init>
 8005288:	2600      	movs	r6, #0
 800528a:	4d0a      	ldr	r5, [pc, #40]	; (80052b4 <__libc_init_array+0x40>)
 800528c:	4c0a      	ldr	r4, [pc, #40]	; (80052b8 <__libc_init_array+0x44>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	42a6      	cmp	r6, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f855 3b04 	ldr.w	r3, [r5], #4
 800529c:	4798      	blx	r3
 800529e:	3601      	adds	r6, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a6:	4798      	blx	r3
 80052a8:	3601      	adds	r6, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	0800603c 	.word	0x0800603c
 80052b0:	0800603c 	.word	0x0800603c
 80052b4:	0800603c 	.word	0x0800603c
 80052b8:	08006040 	.word	0x08006040

080052bc <memcpy>:
 80052bc:	440a      	add	r2, r1
 80052be:	4291      	cmp	r1, r2
 80052c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052c4:	d100      	bne.n	80052c8 <memcpy+0xc>
 80052c6:	4770      	bx	lr
 80052c8:	b510      	push	{r4, lr}
 80052ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ce:	4291      	cmp	r1, r2
 80052d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052d4:	d1f9      	bne.n	80052ca <memcpy+0xe>
 80052d6:	bd10      	pop	{r4, pc}

080052d8 <memset>:
 80052d8:	4603      	mov	r3, r0
 80052da:	4402      	add	r2, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	d100      	bne.n	80052e2 <memset+0xa>
 80052e0:	4770      	bx	lr
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	e7f9      	b.n	80052dc <memset+0x4>

080052e8 <siprintf>:
 80052e8:	b40e      	push	{r1, r2, r3}
 80052ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052ee:	b500      	push	{lr}
 80052f0:	b09c      	sub	sp, #112	; 0x70
 80052f2:	ab1d      	add	r3, sp, #116	; 0x74
 80052f4:	9002      	str	r0, [sp, #8]
 80052f6:	9006      	str	r0, [sp, #24]
 80052f8:	9107      	str	r1, [sp, #28]
 80052fa:	9104      	str	r1, [sp, #16]
 80052fc:	4808      	ldr	r0, [pc, #32]	; (8005320 <siprintf+0x38>)
 80052fe:	4909      	ldr	r1, [pc, #36]	; (8005324 <siprintf+0x3c>)
 8005300:	f853 2b04 	ldr.w	r2, [r3], #4
 8005304:	9105      	str	r1, [sp, #20]
 8005306:	6800      	ldr	r0, [r0, #0]
 8005308:	a902      	add	r1, sp, #8
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f000 f8c6 	bl	800549c <_svfiprintf_r>
 8005310:	2200      	movs	r2, #0
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	b01c      	add	sp, #112	; 0x70
 8005318:	f85d eb04 	ldr.w	lr, [sp], #4
 800531c:	b003      	add	sp, #12
 800531e:	4770      	bx	lr
 8005320:	20000060 	.word	0x20000060
 8005324:	ffff0208 	.word	0xffff0208

08005328 <strcat>:
 8005328:	4602      	mov	r2, r0
 800532a:	b510      	push	{r4, lr}
 800532c:	7814      	ldrb	r4, [r2, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	3201      	adds	r2, #1
 8005332:	2c00      	cmp	r4, #0
 8005334:	d1fa      	bne.n	800532c <strcat+0x4>
 8005336:	3b01      	subs	r3, #1
 8005338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800533c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005340:	2a00      	cmp	r2, #0
 8005342:	d1f9      	bne.n	8005338 <strcat+0x10>
 8005344:	bd10      	pop	{r4, pc}

08005346 <strstr>:
 8005346:	780a      	ldrb	r2, [r1, #0]
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	b96a      	cbnz	r2, 8005368 <strstr+0x22>
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	429a      	cmp	r2, r3
 8005350:	d109      	bne.n	8005366 <strstr+0x20>
 8005352:	460c      	mov	r4, r1
 8005354:	4605      	mov	r5, r0
 8005356:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f6      	beq.n	800534c <strstr+0x6>
 800535e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005362:	429e      	cmp	r6, r3
 8005364:	d0f7      	beq.n	8005356 <strstr+0x10>
 8005366:	3001      	adds	r0, #1
 8005368:	7803      	ldrb	r3, [r0, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1ef      	bne.n	800534e <strstr+0x8>
 800536e:	4618      	mov	r0, r3
 8005370:	e7ec      	b.n	800534c <strstr+0x6>

08005372 <_vsniprintf_r>:
 8005372:	b530      	push	{r4, r5, lr}
 8005374:	4614      	mov	r4, r2
 8005376:	2c00      	cmp	r4, #0
 8005378:	4605      	mov	r5, r0
 800537a:	461a      	mov	r2, r3
 800537c:	b09b      	sub	sp, #108	; 0x6c
 800537e:	da05      	bge.n	800538c <_vsniprintf_r+0x1a>
 8005380:	238b      	movs	r3, #139	; 0x8b
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	b01b      	add	sp, #108	; 0x6c
 800538a:	bd30      	pop	{r4, r5, pc}
 800538c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005390:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005394:	bf0c      	ite	eq
 8005396:	4623      	moveq	r3, r4
 8005398:	f104 33ff 	addne.w	r3, r4, #4294967295
 800539c:	9302      	str	r3, [sp, #8]
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053a4:	9100      	str	r1, [sp, #0]
 80053a6:	9104      	str	r1, [sp, #16]
 80053a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80053ac:	4669      	mov	r1, sp
 80053ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053b0:	f000 f874 	bl	800549c <_svfiprintf_r>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	bfbc      	itt	lt
 80053b8:	238b      	movlt	r3, #139	; 0x8b
 80053ba:	602b      	strlt	r3, [r5, #0]
 80053bc:	2c00      	cmp	r4, #0
 80053be:	d0e3      	beq.n	8005388 <_vsniprintf_r+0x16>
 80053c0:	2200      	movs	r2, #0
 80053c2:	9b00      	ldr	r3, [sp, #0]
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e7df      	b.n	8005388 <_vsniprintf_r+0x16>

080053c8 <vsniprintf>:
 80053c8:	b507      	push	{r0, r1, r2, lr}
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	460a      	mov	r2, r1
 80053d0:	4601      	mov	r1, r0
 80053d2:	4803      	ldr	r0, [pc, #12]	; (80053e0 <vsniprintf+0x18>)
 80053d4:	6800      	ldr	r0, [r0, #0]
 80053d6:	f7ff ffcc 	bl	8005372 <_vsniprintf_r>
 80053da:	b003      	add	sp, #12
 80053dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80053e0:	20000060 	.word	0x20000060

080053e4 <__ssputs_r>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	688e      	ldr	r6, [r1, #8]
 80053ea:	4682      	mov	sl, r0
 80053ec:	429e      	cmp	r6, r3
 80053ee:	460c      	mov	r4, r1
 80053f0:	4690      	mov	r8, r2
 80053f2:	461f      	mov	r7, r3
 80053f4:	d838      	bhi.n	8005468 <__ssputs_r+0x84>
 80053f6:	898a      	ldrh	r2, [r1, #12]
 80053f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053fc:	d032      	beq.n	8005464 <__ssputs_r+0x80>
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	6909      	ldr	r1, [r1, #16]
 8005402:	3301      	adds	r3, #1
 8005404:	eba5 0901 	sub.w	r9, r5, r1
 8005408:	6965      	ldr	r5, [r4, #20]
 800540a:	444b      	add	r3, r9
 800540c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005414:	106d      	asrs	r5, r5, #1
 8005416:	429d      	cmp	r5, r3
 8005418:	bf38      	it	cc
 800541a:	461d      	movcc	r5, r3
 800541c:	0553      	lsls	r3, r2, #21
 800541e:	d531      	bpl.n	8005484 <__ssputs_r+0xa0>
 8005420:	4629      	mov	r1, r5
 8005422:	f000 fb61 	bl	8005ae8 <_malloc_r>
 8005426:	4606      	mov	r6, r0
 8005428:	b950      	cbnz	r0, 8005440 <__ssputs_r+0x5c>
 800542a:	230c      	movs	r3, #12
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	f8ca 3000 	str.w	r3, [sl]
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	464a      	mov	r2, r9
 8005442:	6921      	ldr	r1, [r4, #16]
 8005444:	f7ff ff3a 	bl	80052bc <memcpy>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	6126      	str	r6, [r4, #16]
 8005456:	444e      	add	r6, r9
 8005458:	6026      	str	r6, [r4, #0]
 800545a:	463e      	mov	r6, r7
 800545c:	6165      	str	r5, [r4, #20]
 800545e:	eba5 0509 	sub.w	r5, r5, r9
 8005462:	60a5      	str	r5, [r4, #8]
 8005464:	42be      	cmp	r6, r7
 8005466:	d900      	bls.n	800546a <__ssputs_r+0x86>
 8005468:	463e      	mov	r6, r7
 800546a:	4632      	mov	r2, r6
 800546c:	4641      	mov	r1, r8
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	f000 fab8 	bl	80059e4 <memmove>
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	2000      	movs	r0, #0
 8005478:	1b9b      	subs	r3, r3, r6
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	4433      	add	r3, r6
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e7db      	b.n	800543c <__ssputs_r+0x58>
 8005484:	462a      	mov	r2, r5
 8005486:	f000 fba3 	bl	8005bd0 <_realloc_r>
 800548a:	4606      	mov	r6, r0
 800548c:	2800      	cmp	r0, #0
 800548e:	d1e1      	bne.n	8005454 <__ssputs_r+0x70>
 8005490:	4650      	mov	r0, sl
 8005492:	6921      	ldr	r1, [r4, #16]
 8005494:	f000 fac0 	bl	8005a18 <_free_r>
 8005498:	e7c7      	b.n	800542a <__ssputs_r+0x46>
	...

0800549c <_svfiprintf_r>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4698      	mov	r8, r3
 80054a2:	898b      	ldrh	r3, [r1, #12]
 80054a4:	4607      	mov	r7, r0
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	460d      	mov	r5, r1
 80054aa:	4614      	mov	r4, r2
 80054ac:	b09d      	sub	sp, #116	; 0x74
 80054ae:	d50e      	bpl.n	80054ce <_svfiprintf_r+0x32>
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	b963      	cbnz	r3, 80054ce <_svfiprintf_r+0x32>
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	f000 fb17 	bl	8005ae8 <_malloc_r>
 80054ba:	6028      	str	r0, [r5, #0]
 80054bc:	6128      	str	r0, [r5, #16]
 80054be:	b920      	cbnz	r0, 80054ca <_svfiprintf_r+0x2e>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e0d1      	b.n	800566e <_svfiprintf_r+0x1d2>
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	616b      	str	r3, [r5, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
 80054d2:	2320      	movs	r3, #32
 80054d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d8:	2330      	movs	r3, #48	; 0x30
 80054da:	f04f 0901 	mov.w	r9, #1
 80054de:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005688 <_svfiprintf_r+0x1ec>
 80054e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054ea:	4623      	mov	r3, r4
 80054ec:	469a      	mov	sl, r3
 80054ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f2:	b10a      	cbz	r2, 80054f8 <_svfiprintf_r+0x5c>
 80054f4:	2a25      	cmp	r2, #37	; 0x25
 80054f6:	d1f9      	bne.n	80054ec <_svfiprintf_r+0x50>
 80054f8:	ebba 0b04 	subs.w	fp, sl, r4
 80054fc:	d00b      	beq.n	8005516 <_svfiprintf_r+0x7a>
 80054fe:	465b      	mov	r3, fp
 8005500:	4622      	mov	r2, r4
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff6d 	bl	80053e4 <__ssputs_r>
 800550a:	3001      	adds	r0, #1
 800550c:	f000 80aa 	beq.w	8005664 <_svfiprintf_r+0x1c8>
 8005510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005512:	445a      	add	r2, fp
 8005514:	9209      	str	r2, [sp, #36]	; 0x24
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a2 	beq.w	8005664 <_svfiprintf_r+0x1c8>
 8005520:	2300      	movs	r3, #0
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800552a:	f10a 0a01 	add.w	sl, sl, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	9307      	str	r3, [sp, #28]
 8005532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005536:	931a      	str	r3, [sp, #104]	; 0x68
 8005538:	4654      	mov	r4, sl
 800553a:	2205      	movs	r2, #5
 800553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005540:	4851      	ldr	r0, [pc, #324]	; (8005688 <_svfiprintf_r+0x1ec>)
 8005542:	f000 fa41 	bl	80059c8 <memchr>
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	b9d8      	cbnz	r0, 8005582 <_svfiprintf_r+0xe6>
 800554a:	06d0      	lsls	r0, r2, #27
 800554c:	bf44      	itt	mi
 800554e:	2320      	movmi	r3, #32
 8005550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005554:	0711      	lsls	r1, r2, #28
 8005556:	bf44      	itt	mi
 8005558:	232b      	movmi	r3, #43	; 0x2b
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555e:	f89a 3000 	ldrb.w	r3, [sl]
 8005562:	2b2a      	cmp	r3, #42	; 0x2a
 8005564:	d015      	beq.n	8005592 <_svfiprintf_r+0xf6>
 8005566:	4654      	mov	r4, sl
 8005568:	2000      	movs	r0, #0
 800556a:	f04f 0c0a 	mov.w	ip, #10
 800556e:	9a07      	ldr	r2, [sp, #28]
 8005570:	4621      	mov	r1, r4
 8005572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005576:	3b30      	subs	r3, #48	; 0x30
 8005578:	2b09      	cmp	r3, #9
 800557a:	d94e      	bls.n	800561a <_svfiprintf_r+0x17e>
 800557c:	b1b0      	cbz	r0, 80055ac <_svfiprintf_r+0x110>
 800557e:	9207      	str	r2, [sp, #28]
 8005580:	e014      	b.n	80055ac <_svfiprintf_r+0x110>
 8005582:	eba0 0308 	sub.w	r3, r0, r8
 8005586:	fa09 f303 	lsl.w	r3, r9, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	46a2      	mov	sl, r4
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	e7d2      	b.n	8005538 <_svfiprintf_r+0x9c>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	9103      	str	r1, [sp, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfbb      	ittet	lt
 800559e:	425b      	neglt	r3, r3
 80055a0:	f042 0202 	orrlt.w	r2, r2, #2
 80055a4:	9307      	strge	r3, [sp, #28]
 80055a6:	9307      	strlt	r3, [sp, #28]
 80055a8:	bfb8      	it	lt
 80055aa:	9204      	strlt	r2, [sp, #16]
 80055ac:	7823      	ldrb	r3, [r4, #0]
 80055ae:	2b2e      	cmp	r3, #46	; 0x2e
 80055b0:	d10c      	bne.n	80055cc <_svfiprintf_r+0x130>
 80055b2:	7863      	ldrb	r3, [r4, #1]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d135      	bne.n	8005624 <_svfiprintf_r+0x188>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	3402      	adds	r4, #2
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9203      	str	r2, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfb8      	it	lt
 80055c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800568c <_svfiprintf_r+0x1f0>
 80055d0:	2203      	movs	r2, #3
 80055d2:	4650      	mov	r0, sl
 80055d4:	7821      	ldrb	r1, [r4, #0]
 80055d6:	f000 f9f7 	bl	80059c8 <memchr>
 80055da:	b140      	cbz	r0, 80055ee <_svfiprintf_r+0x152>
 80055dc:	2340      	movs	r3, #64	; 0x40
 80055de:	eba0 000a 	sub.w	r0, r0, sl
 80055e2:	fa03 f000 	lsl.w	r0, r3, r0
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	3401      	adds	r4, #1
 80055ea:	4303      	orrs	r3, r0
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f2:	2206      	movs	r2, #6
 80055f4:	4826      	ldr	r0, [pc, #152]	; (8005690 <_svfiprintf_r+0x1f4>)
 80055f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055fa:	f000 f9e5 	bl	80059c8 <memchr>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d038      	beq.n	8005674 <_svfiprintf_r+0x1d8>
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <_svfiprintf_r+0x1f8>)
 8005604:	bb1b      	cbnz	r3, 800564e <_svfiprintf_r+0x1b2>
 8005606:	9b03      	ldr	r3, [sp, #12]
 8005608:	3307      	adds	r3, #7
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	3308      	adds	r3, #8
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	4433      	add	r3, r6
 8005616:	9309      	str	r3, [sp, #36]	; 0x24
 8005618:	e767      	b.n	80054ea <_svfiprintf_r+0x4e>
 800561a:	460c      	mov	r4, r1
 800561c:	2001      	movs	r0, #1
 800561e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005622:	e7a5      	b.n	8005570 <_svfiprintf_r+0xd4>
 8005624:	2300      	movs	r3, #0
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4619      	mov	r1, r3
 800562c:	3401      	adds	r4, #1
 800562e:	9305      	str	r3, [sp, #20]
 8005630:	4620      	mov	r0, r4
 8005632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005636:	3a30      	subs	r2, #48	; 0x30
 8005638:	2a09      	cmp	r2, #9
 800563a:	d903      	bls.n	8005644 <_svfiprintf_r+0x1a8>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0c5      	beq.n	80055cc <_svfiprintf_r+0x130>
 8005640:	9105      	str	r1, [sp, #20]
 8005642:	e7c3      	b.n	80055cc <_svfiprintf_r+0x130>
 8005644:	4604      	mov	r4, r0
 8005646:	2301      	movs	r3, #1
 8005648:	fb0c 2101 	mla	r1, ip, r1, r2
 800564c:	e7f0      	b.n	8005630 <_svfiprintf_r+0x194>
 800564e:	ab03      	add	r3, sp, #12
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	462a      	mov	r2, r5
 8005654:	4638      	mov	r0, r7
 8005656:	4b10      	ldr	r3, [pc, #64]	; (8005698 <_svfiprintf_r+0x1fc>)
 8005658:	a904      	add	r1, sp, #16
 800565a:	f3af 8000 	nop.w
 800565e:	1c42      	adds	r2, r0, #1
 8005660:	4606      	mov	r6, r0
 8005662:	d1d6      	bne.n	8005612 <_svfiprintf_r+0x176>
 8005664:	89ab      	ldrh	r3, [r5, #12]
 8005666:	065b      	lsls	r3, r3, #25
 8005668:	f53f af2c 	bmi.w	80054c4 <_svfiprintf_r+0x28>
 800566c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566e:	b01d      	add	sp, #116	; 0x74
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	ab03      	add	r3, sp, #12
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	462a      	mov	r2, r5
 800567a:	4638      	mov	r0, r7
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <_svfiprintf_r+0x1fc>)
 800567e:	a904      	add	r1, sp, #16
 8005680:	f000 f87c 	bl	800577c <_printf_i>
 8005684:	e7eb      	b.n	800565e <_svfiprintf_r+0x1c2>
 8005686:	bf00      	nop
 8005688:	08006006 	.word	0x08006006
 800568c:	0800600c 	.word	0x0800600c
 8005690:	08006010 	.word	0x08006010
 8005694:	00000000 	.word	0x00000000
 8005698:	080053e5 	.word	0x080053e5

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4616      	mov	r6, r2
 80056a2:	4699      	mov	r9, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	4607      	mov	r7, r0
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bfb8      	it	lt
 80056ae:	4613      	movlt	r3, r2
 80056b0:	6033      	str	r3, [r6, #0]
 80056b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b6:	460c      	mov	r4, r1
 80056b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056bc:	b10a      	cbz	r2, 80056c2 <_printf_common+0x26>
 80056be:	3301      	adds	r3, #1
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	6833      	ldrmi	r3, [r6, #0]
 80056ca:	3302      	addmi	r3, #2
 80056cc:	6033      	strmi	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	f015 0506 	ands.w	r5, r5, #6
 80056d4:	d106      	bne.n	80056e4 <_printf_common+0x48>
 80056d6:	f104 0a19 	add.w	sl, r4, #25
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc28      	bgt.n	8005736 <_printf_common+0x9a>
 80056e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e8:	1e13      	subs	r3, r2, #0
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	0692      	lsls	r2, r2, #26
 80056f2:	d42d      	bmi.n	8005750 <_printf_common+0xb4>
 80056f4:	4649      	mov	r1, r9
 80056f6:	4638      	mov	r0, r7
 80056f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056fc:	47c0      	blx	r8
 80056fe:	3001      	adds	r0, #1
 8005700:	d020      	beq.n	8005744 <_printf_common+0xa8>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	68e5      	ldr	r5, [r4, #12]
 8005706:	f003 0306 	and.w	r3, r3, #6
 800570a:	2b04      	cmp	r3, #4
 800570c:	bf18      	it	ne
 800570e:	2500      	movne	r5, #0
 8005710:	6832      	ldr	r2, [r6, #0]
 8005712:	f04f 0600 	mov.w	r6, #0
 8005716:	68a3      	ldr	r3, [r4, #8]
 8005718:	bf08      	it	eq
 800571a:	1aad      	subeq	r5, r5, r2
 800571c:	6922      	ldr	r2, [r4, #16]
 800571e:	bf08      	it	eq
 8005720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005724:	4293      	cmp	r3, r2
 8005726:	bfc4      	itt	gt
 8005728:	1a9b      	subgt	r3, r3, r2
 800572a:	18ed      	addgt	r5, r5, r3
 800572c:	341a      	adds	r4, #26
 800572e:	42b5      	cmp	r5, r6
 8005730:	d11a      	bne.n	8005768 <_printf_common+0xcc>
 8005732:	2000      	movs	r0, #0
 8005734:	e008      	b.n	8005748 <_printf_common+0xac>
 8005736:	2301      	movs	r3, #1
 8005738:	4652      	mov	r2, sl
 800573a:	4649      	mov	r1, r9
 800573c:	4638      	mov	r0, r7
 800573e:	47c0      	blx	r8
 8005740:	3001      	adds	r0, #1
 8005742:	d103      	bne.n	800574c <_printf_common+0xb0>
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574c:	3501      	adds	r5, #1
 800574e:	e7c4      	b.n	80056da <_printf_common+0x3e>
 8005750:	2030      	movs	r0, #48	; 0x30
 8005752:	18e1      	adds	r1, r4, r3
 8005754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800575e:	4422      	add	r2, r4
 8005760:	3302      	adds	r3, #2
 8005762:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005766:	e7c5      	b.n	80056f4 <_printf_common+0x58>
 8005768:	2301      	movs	r3, #1
 800576a:	4622      	mov	r2, r4
 800576c:	4649      	mov	r1, r9
 800576e:	4638      	mov	r0, r7
 8005770:	47c0      	blx	r8
 8005772:	3001      	adds	r0, #1
 8005774:	d0e6      	beq.n	8005744 <_printf_common+0xa8>
 8005776:	3601      	adds	r6, #1
 8005778:	e7d9      	b.n	800572e <_printf_common+0x92>
	...

0800577c <_printf_i>:
 800577c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	7e0f      	ldrb	r7, [r1, #24]
 8005782:	4691      	mov	r9, r2
 8005784:	2f78      	cmp	r7, #120	; 0x78
 8005786:	4680      	mov	r8, r0
 8005788:	460c      	mov	r4, r1
 800578a:	469a      	mov	sl, r3
 800578c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800578e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005792:	d807      	bhi.n	80057a4 <_printf_i+0x28>
 8005794:	2f62      	cmp	r7, #98	; 0x62
 8005796:	d80a      	bhi.n	80057ae <_printf_i+0x32>
 8005798:	2f00      	cmp	r7, #0
 800579a:	f000 80d9 	beq.w	8005950 <_printf_i+0x1d4>
 800579e:	2f58      	cmp	r7, #88	; 0x58
 80057a0:	f000 80a4 	beq.w	80058ec <_printf_i+0x170>
 80057a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057ac:	e03a      	b.n	8005824 <_printf_i+0xa8>
 80057ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057b2:	2b15      	cmp	r3, #21
 80057b4:	d8f6      	bhi.n	80057a4 <_printf_i+0x28>
 80057b6:	a101      	add	r1, pc, #4	; (adr r1, 80057bc <_printf_i+0x40>)
 80057b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057bc:	08005815 	.word	0x08005815
 80057c0:	08005829 	.word	0x08005829
 80057c4:	080057a5 	.word	0x080057a5
 80057c8:	080057a5 	.word	0x080057a5
 80057cc:	080057a5 	.word	0x080057a5
 80057d0:	080057a5 	.word	0x080057a5
 80057d4:	08005829 	.word	0x08005829
 80057d8:	080057a5 	.word	0x080057a5
 80057dc:	080057a5 	.word	0x080057a5
 80057e0:	080057a5 	.word	0x080057a5
 80057e4:	080057a5 	.word	0x080057a5
 80057e8:	08005937 	.word	0x08005937
 80057ec:	08005859 	.word	0x08005859
 80057f0:	08005919 	.word	0x08005919
 80057f4:	080057a5 	.word	0x080057a5
 80057f8:	080057a5 	.word	0x080057a5
 80057fc:	08005959 	.word	0x08005959
 8005800:	080057a5 	.word	0x080057a5
 8005804:	08005859 	.word	0x08005859
 8005808:	080057a5 	.word	0x080057a5
 800580c:	080057a5 	.word	0x080057a5
 8005810:	08005921 	.word	0x08005921
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	1d1a      	adds	r2, r3, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	602a      	str	r2, [r5, #0]
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005824:	2301      	movs	r3, #1
 8005826:	e0a4      	b.n	8005972 <_printf_i+0x1f6>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	6829      	ldr	r1, [r5, #0]
 800582c:	0606      	lsls	r6, r0, #24
 800582e:	f101 0304 	add.w	r3, r1, #4
 8005832:	d50a      	bpl.n	800584a <_printf_i+0xce>
 8005834:	680e      	ldr	r6, [r1, #0]
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	2e00      	cmp	r6, #0
 800583a:	da03      	bge.n	8005844 <_printf_i+0xc8>
 800583c:	232d      	movs	r3, #45	; 0x2d
 800583e:	4276      	negs	r6, r6
 8005840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005844:	230a      	movs	r3, #10
 8005846:	485e      	ldr	r0, [pc, #376]	; (80059c0 <_printf_i+0x244>)
 8005848:	e019      	b.n	800587e <_printf_i+0x102>
 800584a:	680e      	ldr	r6, [r1, #0]
 800584c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	bf18      	it	ne
 8005854:	b236      	sxthne	r6, r6
 8005856:	e7ef      	b.n	8005838 <_printf_i+0xbc>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	1d19      	adds	r1, r3, #4
 800585e:	6029      	str	r1, [r5, #0]
 8005860:	0601      	lsls	r1, r0, #24
 8005862:	d501      	bpl.n	8005868 <_printf_i+0xec>
 8005864:	681e      	ldr	r6, [r3, #0]
 8005866:	e002      	b.n	800586e <_printf_i+0xf2>
 8005868:	0646      	lsls	r6, r0, #25
 800586a:	d5fb      	bpl.n	8005864 <_printf_i+0xe8>
 800586c:	881e      	ldrh	r6, [r3, #0]
 800586e:	2f6f      	cmp	r7, #111	; 0x6f
 8005870:	bf0c      	ite	eq
 8005872:	2308      	moveq	r3, #8
 8005874:	230a      	movne	r3, #10
 8005876:	4852      	ldr	r0, [pc, #328]	; (80059c0 <_printf_i+0x244>)
 8005878:	2100      	movs	r1, #0
 800587a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800587e:	6865      	ldr	r5, [r4, #4]
 8005880:	2d00      	cmp	r5, #0
 8005882:	bfa8      	it	ge
 8005884:	6821      	ldrge	r1, [r4, #0]
 8005886:	60a5      	str	r5, [r4, #8]
 8005888:	bfa4      	itt	ge
 800588a:	f021 0104 	bicge.w	r1, r1, #4
 800588e:	6021      	strge	r1, [r4, #0]
 8005890:	b90e      	cbnz	r6, 8005896 <_printf_i+0x11a>
 8005892:	2d00      	cmp	r5, #0
 8005894:	d04d      	beq.n	8005932 <_printf_i+0x1b6>
 8005896:	4615      	mov	r5, r2
 8005898:	fbb6 f1f3 	udiv	r1, r6, r3
 800589c:	fb03 6711 	mls	r7, r3, r1, r6
 80058a0:	5dc7      	ldrb	r7, [r0, r7]
 80058a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a6:	4637      	mov	r7, r6
 80058a8:	42bb      	cmp	r3, r7
 80058aa:	460e      	mov	r6, r1
 80058ac:	d9f4      	bls.n	8005898 <_printf_i+0x11c>
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d10b      	bne.n	80058ca <_printf_i+0x14e>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	07de      	lsls	r6, r3, #31
 80058b6:	d508      	bpl.n	80058ca <_printf_i+0x14e>
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	6861      	ldr	r1, [r4, #4]
 80058bc:	4299      	cmp	r1, r3
 80058be:	bfde      	ittt	le
 80058c0:	2330      	movle	r3, #48	; 0x30
 80058c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ca:	1b52      	subs	r2, r2, r5
 80058cc:	6122      	str	r2, [r4, #16]
 80058ce:	464b      	mov	r3, r9
 80058d0:	4621      	mov	r1, r4
 80058d2:	4640      	mov	r0, r8
 80058d4:	f8cd a000 	str.w	sl, [sp]
 80058d8:	aa03      	add	r2, sp, #12
 80058da:	f7ff fedf 	bl	800569c <_printf_common>
 80058de:	3001      	adds	r0, #1
 80058e0:	d14c      	bne.n	800597c <_printf_i+0x200>
 80058e2:	f04f 30ff 	mov.w	r0, #4294967295
 80058e6:	b004      	add	sp, #16
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	4834      	ldr	r0, [pc, #208]	; (80059c0 <_printf_i+0x244>)
 80058ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058f2:	6829      	ldr	r1, [r5, #0]
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80058fa:	6029      	str	r1, [r5, #0]
 80058fc:	061d      	lsls	r5, r3, #24
 80058fe:	d514      	bpl.n	800592a <_printf_i+0x1ae>
 8005900:	07df      	lsls	r7, r3, #31
 8005902:	bf44      	itt	mi
 8005904:	f043 0320 	orrmi.w	r3, r3, #32
 8005908:	6023      	strmi	r3, [r4, #0]
 800590a:	b91e      	cbnz	r6, 8005914 <_printf_i+0x198>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	f023 0320 	bic.w	r3, r3, #32
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	2310      	movs	r3, #16
 8005916:	e7af      	b.n	8005878 <_printf_i+0xfc>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	f043 0320 	orr.w	r3, r3, #32
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	2378      	movs	r3, #120	; 0x78
 8005922:	4828      	ldr	r0, [pc, #160]	; (80059c4 <_printf_i+0x248>)
 8005924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005928:	e7e3      	b.n	80058f2 <_printf_i+0x176>
 800592a:	0659      	lsls	r1, r3, #25
 800592c:	bf48      	it	mi
 800592e:	b2b6      	uxthmi	r6, r6
 8005930:	e7e6      	b.n	8005900 <_printf_i+0x184>
 8005932:	4615      	mov	r5, r2
 8005934:	e7bb      	b.n	80058ae <_printf_i+0x132>
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	6826      	ldr	r6, [r4, #0]
 800593a:	1d18      	adds	r0, r3, #4
 800593c:	6961      	ldr	r1, [r4, #20]
 800593e:	6028      	str	r0, [r5, #0]
 8005940:	0635      	lsls	r5, r6, #24
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	d501      	bpl.n	800594a <_printf_i+0x1ce>
 8005946:	6019      	str	r1, [r3, #0]
 8005948:	e002      	b.n	8005950 <_printf_i+0x1d4>
 800594a:	0670      	lsls	r0, r6, #25
 800594c:	d5fb      	bpl.n	8005946 <_printf_i+0x1ca>
 800594e:	8019      	strh	r1, [r3, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	4615      	mov	r5, r2
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	e7ba      	b.n	80058ce <_printf_i+0x152>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	2100      	movs	r1, #0
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	602a      	str	r2, [r5, #0]
 8005960:	681d      	ldr	r5, [r3, #0]
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f82f 	bl	80059c8 <memchr>
 800596a:	b108      	cbz	r0, 8005970 <_printf_i+0x1f4>
 800596c:	1b40      	subs	r0, r0, r5
 800596e:	6060      	str	r0, [r4, #4]
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	2300      	movs	r3, #0
 8005976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597a:	e7a8      	b.n	80058ce <_printf_i+0x152>
 800597c:	462a      	mov	r2, r5
 800597e:	4649      	mov	r1, r9
 8005980:	4640      	mov	r0, r8
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	47d0      	blx	sl
 8005986:	3001      	adds	r0, #1
 8005988:	d0ab      	beq.n	80058e2 <_printf_i+0x166>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	079b      	lsls	r3, r3, #30
 800598e:	d413      	bmi.n	80059b8 <_printf_i+0x23c>
 8005990:	68e0      	ldr	r0, [r4, #12]
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	4298      	cmp	r0, r3
 8005996:	bfb8      	it	lt
 8005998:	4618      	movlt	r0, r3
 800599a:	e7a4      	b.n	80058e6 <_printf_i+0x16a>
 800599c:	2301      	movs	r3, #1
 800599e:	4632      	mov	r2, r6
 80059a0:	4649      	mov	r1, r9
 80059a2:	4640      	mov	r0, r8
 80059a4:	47d0      	blx	sl
 80059a6:	3001      	adds	r0, #1
 80059a8:	d09b      	beq.n	80058e2 <_printf_i+0x166>
 80059aa:	3501      	adds	r5, #1
 80059ac:	68e3      	ldr	r3, [r4, #12]
 80059ae:	9903      	ldr	r1, [sp, #12]
 80059b0:	1a5b      	subs	r3, r3, r1
 80059b2:	42ab      	cmp	r3, r5
 80059b4:	dcf2      	bgt.n	800599c <_printf_i+0x220>
 80059b6:	e7eb      	b.n	8005990 <_printf_i+0x214>
 80059b8:	2500      	movs	r5, #0
 80059ba:	f104 0619 	add.w	r6, r4, #25
 80059be:	e7f5      	b.n	80059ac <_printf_i+0x230>
 80059c0:	08006017 	.word	0x08006017
 80059c4:	08006028 	.word	0x08006028

080059c8 <memchr>:
 80059c8:	4603      	mov	r3, r0
 80059ca:	b510      	push	{r4, lr}
 80059cc:	b2c9      	uxtb	r1, r1
 80059ce:	4402      	add	r2, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	d101      	bne.n	80059da <memchr+0x12>
 80059d6:	2000      	movs	r0, #0
 80059d8:	e003      	b.n	80059e2 <memchr+0x1a>
 80059da:	7804      	ldrb	r4, [r0, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	428c      	cmp	r4, r1
 80059e0:	d1f6      	bne.n	80059d0 <memchr+0x8>
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <memmove>:
 80059e4:	4288      	cmp	r0, r1
 80059e6:	b510      	push	{r4, lr}
 80059e8:	eb01 0402 	add.w	r4, r1, r2
 80059ec:	d902      	bls.n	80059f4 <memmove+0x10>
 80059ee:	4284      	cmp	r4, r0
 80059f0:	4623      	mov	r3, r4
 80059f2:	d807      	bhi.n	8005a04 <memmove+0x20>
 80059f4:	1e43      	subs	r3, r0, #1
 80059f6:	42a1      	cmp	r1, r4
 80059f8:	d008      	beq.n	8005a0c <memmove+0x28>
 80059fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a02:	e7f8      	b.n	80059f6 <memmove+0x12>
 8005a04:	4601      	mov	r1, r0
 8005a06:	4402      	add	r2, r0
 8005a08:	428a      	cmp	r2, r1
 8005a0a:	d100      	bne.n	8005a0e <memmove+0x2a>
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a16:	e7f7      	b.n	8005a08 <memmove+0x24>

08005a18 <_free_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	d040      	beq.n	8005aa2 <_free_r+0x8a>
 8005a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a24:	1f0c      	subs	r4, r1, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfb8      	it	lt
 8005a2a:	18e4      	addlt	r4, r4, r3
 8005a2c:	f000 f910 	bl	8005c50 <__malloc_lock>
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <_free_r+0x8c>)
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	b933      	cbnz	r3, 8005a44 <_free_r+0x2c>
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	6014      	str	r4, [r2, #0]
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a40:	f000 b90c 	b.w	8005c5c <__malloc_unlock>
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d908      	bls.n	8005a5a <_free_r+0x42>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	1821      	adds	r1, r4, r0
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	bf01      	itttt	eq
 8005a50:	6819      	ldreq	r1, [r3, #0]
 8005a52:	685b      	ldreq	r3, [r3, #4]
 8005a54:	1809      	addeq	r1, r1, r0
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	e7ed      	b.n	8005a36 <_free_r+0x1e>
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b10b      	cbz	r3, 8005a64 <_free_r+0x4c>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d9fa      	bls.n	8005a5a <_free_r+0x42>
 8005a64:	6811      	ldr	r1, [r2, #0]
 8005a66:	1850      	adds	r0, r2, r1
 8005a68:	42a0      	cmp	r0, r4
 8005a6a:	d10b      	bne.n	8005a84 <_free_r+0x6c>
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	4401      	add	r1, r0
 8005a70:	1850      	adds	r0, r2, r1
 8005a72:	4283      	cmp	r3, r0
 8005a74:	6011      	str	r1, [r2, #0]
 8005a76:	d1e0      	bne.n	8005a3a <_free_r+0x22>
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4401      	add	r1, r0
 8005a7e:	6011      	str	r1, [r2, #0]
 8005a80:	6053      	str	r3, [r2, #4]
 8005a82:	e7da      	b.n	8005a3a <_free_r+0x22>
 8005a84:	d902      	bls.n	8005a8c <_free_r+0x74>
 8005a86:	230c      	movs	r3, #12
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	e7d6      	b.n	8005a3a <_free_r+0x22>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	1821      	adds	r1, r4, r0
 8005a90:	428b      	cmp	r3, r1
 8005a92:	bf01      	itttt	eq
 8005a94:	6819      	ldreq	r1, [r3, #0]
 8005a96:	685b      	ldreq	r3, [r3, #4]
 8005a98:	1809      	addeq	r1, r1, r0
 8005a9a:	6021      	streq	r1, [r4, #0]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6054      	str	r4, [r2, #4]
 8005aa0:	e7cb      	b.n	8005a3a <_free_r+0x22>
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	20000414 	.word	0x20000414

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0e      	ldr	r6, [pc, #56]	; (8005ae4 <sbrk_aligned+0x3c>)
 8005aac:	460c      	mov	r4, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b911      	cbnz	r1, 8005aba <sbrk_aligned+0x12>
 8005ab4:	f000 f8bc 	bl	8005c30 <_sbrk_r>
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f8b7 	bl	8005c30 <_sbrk_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d00a      	beq.n	8005adc <sbrk_aligned+0x34>
 8005ac6:	1cc4      	adds	r4, r0, #3
 8005ac8:	f024 0403 	bic.w	r4, r4, #3
 8005acc:	42a0      	cmp	r0, r4
 8005ace:	d007      	beq.n	8005ae0 <sbrk_aligned+0x38>
 8005ad0:	1a21      	subs	r1, r4, r0
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f8ac 	bl	8005c30 <_sbrk_r>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d101      	bne.n	8005ae0 <sbrk_aligned+0x38>
 8005adc:	f04f 34ff 	mov.w	r4, #4294967295
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	20000418 	.word	0x20000418

08005ae8 <_malloc_r>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	1ccd      	adds	r5, r1, #3
 8005aee:	f025 0503 	bic.w	r5, r5, #3
 8005af2:	3508      	adds	r5, #8
 8005af4:	2d0c      	cmp	r5, #12
 8005af6:	bf38      	it	cc
 8005af8:	250c      	movcc	r5, #12
 8005afa:	2d00      	cmp	r5, #0
 8005afc:	4607      	mov	r7, r0
 8005afe:	db01      	blt.n	8005b04 <_malloc_r+0x1c>
 8005b00:	42a9      	cmp	r1, r5
 8005b02:	d905      	bls.n	8005b10 <_malloc_r+0x28>
 8005b04:	230c      	movs	r3, #12
 8005b06:	2600      	movs	r6, #0
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b10:	4e2e      	ldr	r6, [pc, #184]	; (8005bcc <_malloc_r+0xe4>)
 8005b12:	f000 f89d 	bl	8005c50 <__malloc_lock>
 8005b16:	6833      	ldr	r3, [r6, #0]
 8005b18:	461c      	mov	r4, r3
 8005b1a:	bb34      	cbnz	r4, 8005b6a <_malloc_r+0x82>
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f7ff ffc2 	bl	8005aa8 <sbrk_aligned>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	4604      	mov	r4, r0
 8005b28:	d14d      	bne.n	8005bc6 <_malloc_r+0xde>
 8005b2a:	6834      	ldr	r4, [r6, #0]
 8005b2c:	4626      	mov	r6, r4
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d140      	bne.n	8005bb4 <_malloc_r+0xcc>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	4631      	mov	r1, r6
 8005b36:	4638      	mov	r0, r7
 8005b38:	eb04 0803 	add.w	r8, r4, r3
 8005b3c:	f000 f878 	bl	8005c30 <_sbrk_r>
 8005b40:	4580      	cmp	r8, r0
 8005b42:	d13a      	bne.n	8005bba <_malloc_r+0xd2>
 8005b44:	6821      	ldr	r1, [r4, #0]
 8005b46:	3503      	adds	r5, #3
 8005b48:	1a6d      	subs	r5, r5, r1
 8005b4a:	f025 0503 	bic.w	r5, r5, #3
 8005b4e:	3508      	adds	r5, #8
 8005b50:	2d0c      	cmp	r5, #12
 8005b52:	bf38      	it	cc
 8005b54:	250c      	movcc	r5, #12
 8005b56:	4638      	mov	r0, r7
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7ff ffa5 	bl	8005aa8 <sbrk_aligned>
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d02b      	beq.n	8005bba <_malloc_r+0xd2>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	442b      	add	r3, r5
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	e00e      	b.n	8005b88 <_malloc_r+0xa0>
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	1b52      	subs	r2, r2, r5
 8005b6e:	d41e      	bmi.n	8005bae <_malloc_r+0xc6>
 8005b70:	2a0b      	cmp	r2, #11
 8005b72:	d916      	bls.n	8005ba2 <_malloc_r+0xba>
 8005b74:	1961      	adds	r1, r4, r5
 8005b76:	42a3      	cmp	r3, r4
 8005b78:	6025      	str	r5, [r4, #0]
 8005b7a:	bf18      	it	ne
 8005b7c:	6059      	strne	r1, [r3, #4]
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	bf08      	it	eq
 8005b82:	6031      	streq	r1, [r6, #0]
 8005b84:	5162      	str	r2, [r4, r5]
 8005b86:	604b      	str	r3, [r1, #4]
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f104 060b 	add.w	r6, r4, #11
 8005b8e:	f000 f865 	bl	8005c5c <__malloc_unlock>
 8005b92:	f026 0607 	bic.w	r6, r6, #7
 8005b96:	1d23      	adds	r3, r4, #4
 8005b98:	1af2      	subs	r2, r6, r3
 8005b9a:	d0b6      	beq.n	8005b0a <_malloc_r+0x22>
 8005b9c:	1b9b      	subs	r3, r3, r6
 8005b9e:	50a3      	str	r3, [r4, r2]
 8005ba0:	e7b3      	b.n	8005b0a <_malloc_r+0x22>
 8005ba2:	6862      	ldr	r2, [r4, #4]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	bf0c      	ite	eq
 8005ba8:	6032      	streq	r2, [r6, #0]
 8005baa:	605a      	strne	r2, [r3, #4]
 8005bac:	e7ec      	b.n	8005b88 <_malloc_r+0xa0>
 8005bae:	4623      	mov	r3, r4
 8005bb0:	6864      	ldr	r4, [r4, #4]
 8005bb2:	e7b2      	b.n	8005b1a <_malloc_r+0x32>
 8005bb4:	4634      	mov	r4, r6
 8005bb6:	6876      	ldr	r6, [r6, #4]
 8005bb8:	e7b9      	b.n	8005b2e <_malloc_r+0x46>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	f000 f84c 	bl	8005c5c <__malloc_unlock>
 8005bc4:	e7a1      	b.n	8005b0a <_malloc_r+0x22>
 8005bc6:	6025      	str	r5, [r4, #0]
 8005bc8:	e7de      	b.n	8005b88 <_malloc_r+0xa0>
 8005bca:	bf00      	nop
 8005bcc:	20000414 	.word	0x20000414

08005bd0 <_realloc_r>:
 8005bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	460e      	mov	r6, r1
 8005bda:	b921      	cbnz	r1, 8005be6 <_realloc_r+0x16>
 8005bdc:	4611      	mov	r1, r2
 8005bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	f7ff bf81 	b.w	8005ae8 <_malloc_r>
 8005be6:	b92a      	cbnz	r2, 8005bf4 <_realloc_r+0x24>
 8005be8:	f7ff ff16 	bl	8005a18 <_free_r>
 8005bec:	4625      	mov	r5, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	f000 f838 	bl	8005c68 <_malloc_usable_size_r>
 8005bf8:	4284      	cmp	r4, r0
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	d802      	bhi.n	8005c04 <_realloc_r+0x34>
 8005bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c02:	d812      	bhi.n	8005c2a <_realloc_r+0x5a>
 8005c04:	4621      	mov	r1, r4
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7ff ff6e 	bl	8005ae8 <_malloc_r>
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0ed      	beq.n	8005bee <_realloc_r+0x1e>
 8005c12:	42bc      	cmp	r4, r7
 8005c14:	4622      	mov	r2, r4
 8005c16:	4631      	mov	r1, r6
 8005c18:	bf28      	it	cs
 8005c1a:	463a      	movcs	r2, r7
 8005c1c:	f7ff fb4e 	bl	80052bc <memcpy>
 8005c20:	4631      	mov	r1, r6
 8005c22:	4640      	mov	r0, r8
 8005c24:	f7ff fef8 	bl	8005a18 <_free_r>
 8005c28:	e7e1      	b.n	8005bee <_realloc_r+0x1e>
 8005c2a:	4635      	mov	r5, r6
 8005c2c:	e7df      	b.n	8005bee <_realloc_r+0x1e>
	...

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	2300      	movs	r3, #0
 8005c34:	4d05      	ldr	r5, [pc, #20]	; (8005c4c <_sbrk_r+0x1c>)
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fc fbba 	bl	80023b4 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	2000041c 	.word	0x2000041c

08005c50 <__malloc_lock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__malloc_lock+0x8>)
 8005c52:	f000 b811 	b.w	8005c78 <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000420 	.word	0x20000420

08005c5c <__malloc_unlock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_unlock+0x8>)
 8005c5e:	f000 b80c 	b.w	8005c7a <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000420 	.word	0x20000420

08005c68 <_malloc_usable_size_r>:
 8005c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6c:	1f18      	subs	r0, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfbc      	itt	lt
 8005c72:	580b      	ldrlt	r3, [r1, r0]
 8005c74:	18c0      	addlt	r0, r0, r3
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_acquire_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_release_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
